<<<<<<< HEAD
top_n(10)
table <- gt(country_total) %>%
tab_header(title = "Per Capita European Energy Production", subtitle = "2018 total net energy production, top ten displayed") %>%
cols_hide(c("country", "type", "level" , "Year")) %>%
cols_label(country_name = "Country", Energy = "Net Energy\n Production (GWh)", per_cap = "Per Capita\n Energy Production")
table
=======
<<<<<<< HEAD
age <- ggplot(astronauts, aes(Country, age,  color = Country)) + geom_quasirandom(size=1.75, varwidth = TRUE, width  = 0.60) + coord_flip() + scale_color_manual(values=c("#999999", "#DA291C", "#56B4E9"))  + theme_minimal()
age
age <- ggplot(astronauts, aes(Country, age,  color = Country)) + geom_quasirandom(size=1.75, varwidth = TRUE, width  = 0.60) + coord_flip() + scale_color_manual(values=c("#999999", "#DA291C", "#56B4E9"))  + theme_minimal() + theme(legend. position = "none")
age
age <- ggplot(astronauts, aes(Country, age,  color = Country)) + geom_quasirandom(size=1.75, varwidth = TRUE, width  = 0.60) + coord_flip() + scale_color_manual(values=c("#999999", "#DA291C", "#56B4E9"))  + theme_minimal() + theme(legend.position = "none")
age
age <- ggplot(astronauts, aes(Country, age,  color = Country)) + geom_quasirandom(size=1.75, varwidth = TRUE, width  = 0.60) + coord_flip() + scale_color_manual(values=c("#999999", "#DA291C", "#56B4E9"))  + theme_minimal() + theme(legend.position = "none") + labs(title = "Astronaught Age Distribution", y= "", x="Age")
age
age <- ggplot(astronauts, aes(Country, age,  color = Country)) + geom_quasirandom(size=1.75, varwidth = TRUE, width  = 0.60) + coord_flip() + scale_color_manual(values=c("#999999", "#DA291C", "#56B4E9"))  + theme_minimal() + theme(legend.position = "none") + labs(title = "Astronaught Age Distribution", x= "", y="Age")
age
age <- ggplot(astronauts, aes(Country, age,  color = Country)) + geom_quasirandom(size=1.75, varwidth = TRUE, width  = 0.60) + coord_flip() + scale_color_manual(values=c("#999999", "#DA291C", "#56B4E9"))  + theme_minimal() + theme(legend.position = "none") + labs(title = "Astronaut Age Distribution", x= "", y="Age")
age
remotes::install_github("mattcowgill/ggannotate")
state <- read_csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv") %>%
filter(state == "California")
View(state)
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
remotes::install_github("mattcowgill/ggannotate")
install.packages("devtools")
remotes::install_github("mattcowgill/ggannotate")
ERROR: lazy loading failed for package ‘ggannotate’
* removing ‘/Library/Frameworks/R.framework/Versions/4.0/Resources/library/ggannotate’
Error: Failed to install 'ggannotate' from GitHub:
(converted from warning) installation of package ‘/var/folders/_n/bdb_7jms2z1cdytp398fq60r0000gn/T//RtmppK81U0/file4190302fb93c/ggannotate_0.0.0.9000.tar.gz’ had non-zero exit status
remotes::install_github("mattcowgill/ggannotate")
library(tidyverse)
library(lubridate)
library(ggridges)
library(ggbeeswarm)
#Data
astronauts <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-07-14/astronauts.csv')
#Filter
astronauts <- astronauts %>%
mutate(age = year_of_mission - year_of_birth, decade = floor(year_of_mission/ 10) * 10) %>%
mutate(Country = case_when(nationality == "U.S."~ "USA", nationality == "U.S.S.R/Russia" ~ "Russia", TRUE ~ "Other"))
#plot
age_dist <- ggplot(astronauts, aes(x=age, y=decade, group= decade, fill=..x.., alpha = 0.4)) + geom_density_ridges_gradient( alpha = 0.5) + scale_y_reverse(breaks=c(1960,1970,1980,1990,2000,2010),labels = c( "1960" = "1960s", "1970" = "1970s", "1980" = "1980s", "1990" = "1990s", "2000" = "2000s", "2010" = "2010s")) + theme_minimal() + facet_grid(~Country)
age_dist
age <- ggplot(astronauts, aes(Country, age,  color = Country)) + geom_quasirandom(size=1.75, varwidth = TRUE, width  = 0.60) + coord_flip() + scale_color_manual(values=c("#999999", "#DA291C", "#56B4E9"))  + theme_minimal() + theme(legend.position = "none") + labs(title = "Astronaut Age Distribution", x= "", y="Age")
age
remotes::install_github("mattcowgill/ggannotate")
remotes::install_github("mattcowgill/ggannotate")
eva <- ggplot(astronauts, aes(eva_hrs_mission, year)) + geom_col()
library(tidyverse)
library(lubridate)
library(ggridges)
library(ggbeeswarm)
eva <- ggplot(astronauts, aes(eva_hrs_mission, year)) + geom_col()
#Data
astronauts <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-07-14/astronauts.csv')
#Filter
astronauts <- astronauts %>%
mutate(age = year_of_mission - year_of_birth, decade = floor(year_of_mission/ 10) * 10) %>%
mutate(Country = case_when(nationality == "U.S."~ "USA", nationality == "U.S.S.R/Russia" ~ "Russia", TRUE ~ "Other"))
age_dist <- ggplot(astronauts, aes(x=age, y=decade, group= decade, fill=..x.., alpha = 0.4)) + geom_density_ridges_gradient( alpha = 0.5) + scale_y_reverse(breaks=c(1960,1970,1980,1990,2000,2010),labels = c( "1960" = "1960s", "1970" = "1970s", "1980" = "1980s", "1990" = "1990s", "2000" = "2000s", "2010" = "2010s")) + theme_minimal() + facet_grid(~Country)
#Data
astronauts <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-07-14/astronauts.csv')
install.packages("Rcpp")
#Data
astronauts <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-07-14/astronauts.csv')
library(tidyverse)
remove.packages("Rcpp")
install.packages("Rcpp")
library(tidyverse)
library(Rcpp)
library(tidyverse)
update.packages(repos='http://cran.rstudio.com/', ask=FALSE, checkBuilt=TRUE)
library(tidyverse)
library(lubridate)
library(patchwork)
remove.packages("Rcpp")
install.packages("Rcpp")
library(Rcpp)
county <- read_csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv") %>%
filter(county == "Inyo" | county == "Mono") %>%
mutate(date_col = date(date)) %>%
group_by(date_col) %>%
summarise(cases = sum(cases)) %>%
add_row(date_col = as.Date("2020-01-25"), cases = as.double("0"))
library(tidyverse)
library(lubridate)
library(patchwork)
national <- read_csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv")
state <- read_csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv") %>%
filter(state == "California")
county <- read_csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv") %>%
filter(county == "Inyo" | county == "Mono") %>%
mutate(date_col = date(date)) %>%
group_by(date_col) %>%
summarise(cases = sum(cases)) %>%
add_row(date_col = as.Date("2020-01-25"), cases = as.double("0"))
nat_plot <- ggplot(national, aes(date, cases)) + geom_line(size=1.5) + theme_minimal()
nat_plot
state_plot <- ggplot(state, aes(date, cases)) + geom_line() + theme_minimal()
state_plot
eastern_sirra_plot <- ggplot(county , aes(date_col, cases)) + geom_line(color= "red", size=1.2) + theme_minimal(base_size = 16) + labs(x="", y="", title = "Eastern Sierra CA COVID-19", subtitle = "Inyo Co and Mono Co positive cases", caption = "Data: New York Times")
eastern_sirra_plot
final <- nat_plot/state_plot/eastern_sirra_plot
final
eastern_sirra_plot <- ggplot(county , aes(date_col, cases)) + geom_line(color= "red", size=1.2) + theme_minimal(base_size = 16) + labs(x="", y="", title = "Eastern Sierra CA COVID-19", subtitle = "Inyo Co and Mono Co positive cases", caption = "Data: New York Times")
eastern_sirra_plot
View(county)
inyo <- county <- read_csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv") %>%
filter(county == "Inyo")
View(inyo)
shiny::runApp('COVID')
install.packages("shiny")
# load data in 'global' chunk so it can be shared by all users of the dashboard
library(datasets)
data(faithful)
selectInput("n_breaks", label = "Number of bins:", choices = c(10, 20, 35, 50), selected = 20)
sliderInput("bw_adjust", label = "Bandwidth adjustment:", min = 0.2, max = 2, value = 1, step = 0.2)
install.packages("flexdashboard")
install.packages("flexdashboard")
---
title: "Untitled"
output:
flexdashboard::flex_dashboard:
orientation: columns
vertical_layout: fill
---
```{r setup, include=FALSE}
library(flexdashboard)
```
Column {data-width=650}
-----------------------------------------------------------------------
### Chart A
```{r}
```
Column {data-width=350}
-----------------------------------------------------------------------
### Chart B
```{r}
```
### Chart C
```{r}
```
library(flexdashboard)
county <- read_csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv") %>%
filter(county == "Inyo" | county == "Mono") %>%
mutate(date_col = date(date)) %>%
group_by(date_col) %>%
summarise(cases = sum(cases)) %>%
add_row(date_col = as.Date("2020-01-25"), cases = as.double("0"))
library(flexdashboard)
library(tidyverse)
county <- read_csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv") %>%
filter(county == "Inyo" | county == "Mono") %>%
mutate(date_col = date(date)) %>%
group_by(date_col) %>%
summarise(cases = sum(cases)) %>%
add_row(date_col = as.Date("2020-01-25"), cases = as.double("0"))
library(lubridate)
county <- read_csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv") %>%
filter(county == "Inyo" | county == "Mono") %>%
mutate(date_col = date(date)) %>%
group_by(date_col) %>%
summarise(cases = sum(cases)) %>%
add_row(date_col = as.Date("2020-01-25"), cases = as.double("0"))
eastern_sirra_plot <- ggplot(county , aes(date_col, cases)) + geom_line(color= "red", size=1.2) + theme_minimal(base_size = 16) + labs(x="", y="", title = "Eastern Sierra CA COVID-19", subtitle = "Inyo Co and Mono Co positive cases", caption = "Data: New York Times")
eastern_sirra_plot
eastern_sirra_plot <- ggplot(county , aes(date_col, cases)) + geom_line(color= "red", size=1.2) + theme_minimal(base_size = 16) + labs(x="", y="", title = "Eastern Sierra CA COVID-19", subtitle = "Inyo Co and Mono Co positive cases", caption = "Data: New York Times")
eastern_sirra_plot
inyo <- read_csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv") %>%
filter(county == "Inyo") %>%
mutate(date_col = date(date)) %>%
group_by(date_col) %>%
summarise(cases = sum(cases)) %>%
add_row(date_col = as.Date("2020-01-25"), cases = as.double("0"))
inyo_plot <- ggplot(inyo , aes(date_col, cases)) + geom_line(color= "red", size=1.2) + theme_minimal(base_size = 16) + labs(x="", y="", title = "Eastern Sierra CA COVID-19", subtitle = "Inyo Co positive cases", caption = "Data: New York Times")
inyo_plot
eastern_sirra_plot <- ggplot(county , aes(date_col, cases)) + geom_line(color= "red", size=1.2) + theme_minimal(base_size = 16) + labs(x="", y="", title = "Eastern Sierra CA COVID-19", subtitle = "Inyo Co and Mono Co positive cases", caption = "Data: New York Times")
eastern_sirra_plot
county <- read_csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv") %>%
filter(county == "Inyo" | county == "Mono") %>%
mutate(date_col = date(date)) %>%
group_by(date_col) %>%
summarise(cases = sum(cases)) %>%
add_row(date_col = as.Date("2020-01-25"), cases = as.double("0"))
eastern_sirra_plot <- ggplot(county , aes(date_col, cases)) + geom_line(color= "red", size=1.2) + theme_minimal(base_size = 16) + labs(x="", y="", title = "Eastern Sierra CA COVID-19", subtitle = "Inyo Co and Mono Co positive cases", caption = "Data: New York Times")
eastern_sirra_plot
library(lubridate)
county <- read_csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv") %>%
filter(county == "Inyo" | county == "Mono") %>%
mutate(date_col = date(date)) %>%
group_by(date_col) %>%
summarise(cases = sum(cases)) %>%
add_row(date_col = as.Date("2020-01-25"), cases = as.double("0"))
eastern_sirra_plot <- ggplot(county , aes(date_col, cases)) + geom_line(color= "red", size=1.2) + theme_minimal(base_size = 16) + labs(x="", y="", title = "Eastern Sierra CA COVID-19", subtitle = "Inyo Co and Mono Co positive cases", caption = "Data: New York Times")
eastern_sirra_plot
county <- read_csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv") %>%
filter(county == "Inyo" | county == "Mono") %>%
mutate(date_col = date(date)) %>%
summarise(cases = sum(cases)) %>%
add_row(date_col = as.Date("2020-01-25"), cases = as.double("0"))
View(county)
class(county$date_col)
eastern_sirra_plot <- ggplot(county , aes(date_col, cases)) + geom_line(color= "red", size=1.2) + theme_minimal(base_size = 16) + labs(x="", y="", title = "Eastern Sierra CA COVID-19", subtitle = "Inyo Co and Mono Co positive cases", caption = "Data: New York Times")
eastern_sirra_plot
eastern_sirra_plot <- ggplot(county , aes(date_col, cases)) + geom_line(color= "red", size=1.2) + theme_minimal(base_size = 16) + labs(x="", y="", title = "Eastern Sierra CA COVID-19", subtitle = "Inyo Co and Mono Co positive cases", caption = "Data: New York Times") + scale_x_date(date_breaks = "1 week", date_labels = "%W")
eastern_sirra_plot
eastern_sirra_plot <- ggplot(county , aes(date_col, cases)) + geom_line(color= "red", size=1.2) + theme_minimal(base_size = 16) + labs(x="", y="", title = "Eastern Sierra CA COVID-19", subtitle = "Inyo Co and Mono Co positive cases", caption = "Data: New York Times") + scale_x_date(date_breaks = "1 month", date_labels = "%M")
eastern_sirra_plot
eastern_sirra_plot <- ggplot(county , aes(date_col, cases)) + geom_line(color= "red", size=1.2) + theme_minimal(base_size = 16) + labs(x="", y="", title = "Eastern Sierra CA COVID-19", subtitle = "Inyo Co and Mono Co positive cases", caption = "Data: New York Times") + scale_x_date(date_breaks = "1 month", date_labels = "%mm")
eastern_sirra_plot
eastern_sirra_plot <- ggplot(county , aes(date_col, cases)) + geom_line(color= "red", size=1.2) + theme_minimal(base_size = 16) + labs(x="", y="", title = "Eastern Sierra CA COVID-19", subtitle = "Inyo Co and Mono Co positive cases", caption = "Data: New York Times") + scale_x_date(date_breaks = "1 month", date_labels = "%b")
eastern_sirra_plot
eastern_sirra_plot <- ggplot(county , aes(date_col, cases)) + geom_line(color= "red", size=1.2) + theme_linedraw(base_size = 16) + labs(x="", y="", title = "Eastern Sierra CA COVID-19", subtitle = "Inyo Co and Mono Co positive cases", caption = "Data: New York Times") + scale_x_date(date_breaks = "1 month", date_labels = "%b")
eastern_sirra_plot
getwd()
setwd("/Users/ianbell/Documents/GitHub/Tidy-Tuesdays/COVID")
#IG plot save
ggsave(glue("COVID-", Sys.Date(), ".png"), width = 360, height = 640)
library(tidyverse)
#IG plot save
ggsave(glue("COVID-", Sys.Date(), ".png"), width = 360, height = 640)
install.packages("glue")
library(glue)
#IG plot save
ggsave(glue("COVID-", Sys.Date(), ".png"), width = 360, height = 640)
#IG plot save
ggsave(glue("COVID-", Sys.Date(), ".png"), width = 3, height = 4, dpi = 300)
eastern_sirra_plot_IG <- ggplot(county , aes(date_col, cases)) + geom_line(color= "red", size=1.2) + theme_linedraw(base_size = 12, plot.margin = margin(0, 0, 0, 2, "cm"),) + labs(x="", y="", title = "Eastern Sierra CA COVID-19", subtitle = "Inyo Co and Mono Co positive cases", caption = "Data: New York Times") + scale_x_date(date_breaks = "1 month", date_labels = "%b")
eastern_sirra_plot_IG
eastern_sirra_plot_IG <- ggplot(county , aes(date_col, cases)) + geom_line(color= "red", size=1.2) + theme_linedraw(base_size = 12, plot.margin = margin(0, 0, 0, 2, "cm"),) + labs(x="", y="", title = "Eastern Sierra CA COVID-19", subtitle = "Inyo Co and Mono Co positive cases", caption = "Data: New York Times") + scale_x_date(date_breaks = "1 month", date_labels = "%b")
eastern_sirra_plot_IG <- ggplot(county , aes(date_col, cases)) + geom_line(color= "red", size=1.2) + theme_linedraw(base_size = 12, plot.margin = margin(0, 0, 0, 2, "cm")) + labs(x="", y="", title = "Eastern Sierra CA COVID-19", subtitle = "Inyo Co and Mono Co positive cases", caption = "Data: New York Times") + scale_x_date(date_breaks = "1 month", date_labels = "%b")
eastern_sirra_plot_IG <- ggplot(county , aes(date_col, cases)) + geom_line(color= "red", size=1.2) + theme_linedraw(base_size = 12) + theme(plot.margin = margin(0, 0, 0, 2, "cm")) + labs(x="", y="", title = "Eastern Sierra CA COVID-19", subtitle = "Inyo Co and Mono Co positive cases", caption = "Data: New York Times") + scale_x_date(date_breaks = "1 month", date_labels = "%b")
eastern_sirra_plot_IG
eastern_sirra_plot_IG <- ggplot(county , aes(date_col, cases)) + geom_line(color= "red", size=1.2) + theme_linedraw(base_size = 12) + theme(plot.margin = margin(0, 2, 0, 0, "cm")) + labs(x="", y="", title = "Eastern Sierra CA COVID-19", subtitle = "Inyo Co and Mono Co positive cases", caption = "Data: New York Times") + scale_x_date(date_breaks = "1 month", date_labels = "%b")
eastern_sirra_plot_IG
eastern_sirra_plot_IG <- ggplot(county , aes(date_col, cases)) + geom_line(color= "red", size=1.2) + theme_linedraw(base_size = 12) + theme(plot.margin = margin(0, 1, 0, 0, "cm")) + labs(x="", y="", title = "Eastern Sierra CA COVID-19", subtitle = "Inyo Co and Mono Co positive cases", caption = "Data: New York Times") + scale_x_date(date_breaks = "1 month", date_labels = "%b")
eastern_sirra_plot_IG
eastern_sirra_plot_IG <- ggplot(county , aes(date_col, cases)) + geom_line(color= "red", size=1.2) + theme_linedraw(base_size = 12) + theme(plot.margin = margin(0.5, 1, 0.5, 0, "cm")) + labs(x="", y="", title = "Eastern Sierra CA COVID-19", subtitle = "Inyo Co and Mono Co positive cases", caption = "Data: New York Times") + scale_x_date(date_breaks = "1 month", date_labels = "%b")
eastern_sirra_plot_IG
#IG plot save
ggsave(glue("COVID-", Sys.Date(format("%m/%d/%Y")), ".png"), width = 3, height = 4, dpi = 300)
#IG plot save
ggsave(glue("COVID-", Sys.Date(format="%m/%d/%Y"), ".png"), width = 3, height = 4, dpi = 300)
#IG plot save
ggsave(glue("COVID-", Sys.Date(), ".png"), width = 3, height = 4, dpi = 300)
eastern_sirra_plot_IG <- ggplot(county , aes(date_col, cases)) + geom_line(color= "red", size=1.2) + theme_linedraw(base_size = 12) + theme(plot.margin = margin(0.5, 1, 0.5, 0, "cm")) + labs(x="", y="", title = "Eastern Sierra COVID", subtitle = "Inyo Co and Mono Co positive cases", caption = "Data: New York Times") + scale_x_date(date_breaks = "1 month", date_labels = "%b")
eastern_sirra_plot_IG
#IG plot save
ggsave(glue("COVID-", Sys.Date(), ".png"), width = 3, height = 4, dpi = 300)
eastern_sirra_plot_IG <- ggplot(county , aes(date_col, cases)) + geom_line(color= "red", size=1.2) + theme_linedraw(base_size = 12) + theme(plot.margin = margin(0.5, 1, 0.5, 0, "cm")) + labs(x="", y="", title = "Eastern Sierra COVID", subtitle = "Inyo and Mono Co positive cases", caption = "Data: New York Times") + scale_x_date(date_breaks = "1 month", date_labels = "%b")
eastern_sirra_plot_IG
#IG plot save
ggsave(glue("COVID-", Sys.Date(), ".png"), width = 3, height = 4, dpi = 300)
eastern_sirra_plot_IG <- ggplot(county , aes(date_col, cases)) + geom_line(color= "red", size=1.2) + theme_linedraw(base_size = 12) + theme(plot.margin = margin(0.5, 1, 0.5, 0, "cm")) + labs(x="", y="", title = "Eastern Sierra COVID", subtitle = "Inyo + Mono Co cases", caption = "Data: New York Times") + scale_x_date(date_breaks = "1 month", date_labels = "%b")
eastern_sirra_plot_IG
eastern_sirra_plot_IG <- ggplot(county , aes(date_col, cases)) + geom_line(color= "red", size=1.2) + theme_linedraw(base_size = 12) + theme(plot.margin = margin(0.5, 1, 0.5, 0, "cm")) + labs(x="", y="", title = "Eastern Sierra COVID", subtitle = "Inyo and Mono Co cases", caption = "Data: New York Times") + scale_x_date(date_breaks = "1 month", date_labels = "%b")
eastern_sirra_plot_IG
#IG plot save
ggsave(glue("COVID-", Sys.Date(), ".png"), width = 3, height = 4, dpi = 300)
penguins.csv <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-07-28/penguins.csv')
penguins_raw.csv <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-07-28/penguins_raw.csv')
View(penguins_raw.csv)
library(tidyverse)
View(penguins.csv)
penguins <- penguins_raw.csv %>%
mutate(Species = case_when(Species == "Adelie Penguin (Pygoscelis adeliae)"~ "Adelie", Species == "Gentoo penguin (Pygoscelis papua)" ~ "Gentoo", Species == "Chinstrap penguin (Pygoscelis antarctica)" ~ "Chinstrap"))
View(penguins)
penguins <- penguins_raw.csv %>%
mutate(Species = case_when(Species == "Adelie Penguin (Pygoscelis adeliae)"~ "Adelie", Species == "Gentoo penguin (Pygoscelis papua)" ~ "Gentoo", Species == "Chinstrap penguin (Pygoscelis antarctica)" ~ "Chinstrap")) %>%
rename("Delta13C" = -2)
penguins <- penguins_raw.csv %>%
mutate(Species = case_when(Species == "Adelie Penguin (Pygoscelis adeliae)"~ "Adelie", Species == "Gentoo penguin (Pygoscelis papua)" ~ "Gentoo", Species == "Chinstrap penguin (Pygoscelis antarctica)" ~ "Chinstrap")) %>%
rename("Delta13C" = 16)
penguins <- penguins_raw.csv %>%
mutate(Species = case_when(Species == "Adelie Penguin (Pygoscelis adeliae)"~ "Adelie", Species == "Gentoo penguin (Pygoscelis papua)" ~ "Gentoo", Species == "Chinstrap penguin (Pygoscelis antarctica)" ~ "Chinstrap")) %>%
rename("Delta15N" = 15, "Delta13C" = 16)
Penguin_Plot <- ggplot(penguins, aes(Delta15N, Delta13C, color = Species)) + geom_point()
Penguin_Plot
Penguin_Plot <- ggplot(penguins, aes(Region, Delta13C, color = Species)) + geom_point()
Penguin_Plot
Penguin_Plot <- ggplot(penguins, aes(Island, Delta13C, color = Species)) + geom_point()
Penguin_Plot
Penguin_Plot <- ggplot(penguins, aes(Delta15N, Delta13C, color = Species)) + geom_point()
Penguin_Plot
Penguin_Plot <- ggplot(penguins, aes(Delta15N, Delta13C, color = Species)) + geom_point() + geom_encirle()
install.packages("ggalt")
library(ggalt)
Penguin_Plot <- ggplot(penguins, aes(Delta15N, Delta13C, color = Species)) + geom_point() + geom_encirle()
Penguin_Plot
Penguin_Plot <- ggplot(penguins, aes(Delta15N, Delta13C, color = Species)) + geom_point() + geom_encirle()
Penguin_Plot <- ggplot(penguins, aes(Delta15N, Delta13C, color = Species)) + geom_point() + geom_encircle()
Penguin_Plot
Penguin_Plot <- ggplot(penguins, aes(Delta15N, Delta13C, color = Species)) + geom_point() + geom_encircle() + theme_minimal()
Penguin_Plot
Penguin_Plot <- ggplot(penguins, aes(Delta15N, Delta13C, color = Species)) + geom_point() + geom_encircle() + theme_minimal() + scale_color_manual(values = c("darkorange","darkorchid","cyan4"))
Penguin_Plot
Penguin_Plot <- ggplot(penguins, aes(Delta15N, Delta13C, color = Species)) + geom_point() + geom_encircle() + theme_minimal() + scale_color_manual(values = c("darkorange","darkorchid","cyan4")) + labs(title = "Penguin Food Preferences", subtitle = "Stable isotope data")
Penguin_Plot
library(ggtext)
install.packages("ggtext")
library(ggtext)
Penguin_Plot <- ggplot(penguins, aes(Delta15N, Delta13C, color = Species)) + geom_point() + geom_encircle() + theme_minimal() + scale_color_manual(values = c("darkorange","darkorchid","cyan4")) + labs(title = "Penguin Food Preferences", subtitle =  <span style = 'font-size:12pt'> "Stable isotope data indicates that 508 schools had a MMR vaccination rate<span style = 'color:purple;'> below 90%. </span>"")
Penguin_Plot
Penguin_Plot <- ggplot(penguins, aes(Delta15N, Delta13C, color = Species)) + geom_point() + geom_encircle() + theme_minimal() + scale_color_manual(values = c("darkorange","darkorchid","cyan4")) + labs(title = "Penguin Food Preferences", subtitle =  "<span style = 'font-size:12pt'> Stable isotope data indicates that 508 schools had a MMR vaccination rate<span style = 'color:purple;'> below 90%. </span>")
Penguin_Plot
library(ggtext)
Penguin_Plot <- ggplot(penguins, aes(Delta15N, Delta13C, color = Species)) + geom_point() + geom_encircle() + theme_minimal() + scale_color_manual(values = c("darkorange","darkorchid","cyan4")) + labs(title = "Penguin Food Preferences", subtitle = "<span style = 'font-size:12pt'> Stable isotope data indicates that 508 schools had a MMR vaccination rate<span style = 'color:purple;'> below 90%. </span>")
Penguin_Plot
Penguin_Plot <- ggplot(penguins, aes(Delta15N, Delta13C, color = Species)) + geom_point() + geom_encircle() + theme_minimal() + scale_color_manual(values = c("darkorange","darkorchid","cyan4")) + labs(title = " <span style = 'font-size:12pt'> 508 schools had a MMR vaccination rate<span style = 'color:purple;'> below 90%. </span>")
Penguin_Plot
Penguin_Plot <- ggplot(penguins, aes(Delta15N, Delta13C, color = Species)) + geom_point() + geom_encircle() + theme_minimal() + scale_color_manual(values = c("darkorange","darkorchid","cyan4")) + labs(title = " <span style = 'font-size:12pt'> 508 schools had a MMR vaccination rate<span style = 'color:purple;'> below 90%. </span>") + theme(
plot.title.position = "plot",
plot.title = element_textbox_simple(
size = 13,
lineheight = 1,
padding = margin(5.5, 5.5, 5.5, 5.5),
margin = margin(0, 0, 5.5, 0),
fill = "cornsilk"
))
Penguin_Plot
Penguin_Plot <- ggplot(penguins, aes(Delta15N, Delta13C, color = Species)) + geom_point() + geom_encircle() + theme_minimal() + scale_color_manual(values = c("darkorange","darkorchid","cyan4")) + labs(subtitle = " <span style = 'font-size:12pt'> 508 schools had a MMR vaccination rate<span style = 'color:purple;'> below 90%. </span>") + theme(
plot.title.position = "plot",
plot.title = element_textbox_simple(
size = 13,
lineheight = 1,
padding = margin(5.5, 5.5, 5.5, 5.5),
margin = margin(0, 0, 5.5, 0),
fill = "cornsilk"
))
Penguin_Plot
Penguin_Plot <- ggplot(penguins, aes(Delta15N, Delta13C, color = Species)) + geom_point() + geom_encircle() + theme_minimal() + scale_color_manual(values = c("darkorange","darkorchid","cyan4")) + labs(subtitle = " <span style = 'font-size:12pt'> 508 schools had a MMR vaccination rate<span style = 'color:purple;'> below 90%. </span>") + theme(
plot.subtitle.position = "plot",
plot.subtitle = element_textbox_simple(
size = 13,
lineheight = 1,
padding = margin(5.5, 5.5, 5.5, 5.5),
margin = margin(0, 0, 5.5, 0),
fill = "cornsilk"
))
Penguin_Plot
Penguin_Plot <- ggplot(penguins, aes(Delta15N, Delta13C, color = Species)) + geom_point() + geom_encircle() + theme_minimal() + scale_color_manual(values = c("darkorange","darkorchid","cyan4")) + labs(title = "<b>Fuel economy vs. engine displacement</b><br><span style = 'font-size:10pt'>Lorem ipsum *dolor sit amet,*consectetur adipiscing elit, **sed do eiusmod tempor incididunt** ut labore et dolore magna aliqua. <span style = 'color:darkorange;'>Ut enimad minim veniam,</span> quis nostrud exercitation ullamco laboris nisiut aliquip ex ea commodo consequat.</span>") + theme(
plot.title.position = "plot",
plot.title = element_textbox_simple(
size = 13,
lineheight = 1,
padding = margin(5.5, 5.5, 5.5, 5.5),
margin = margin(0, 0, 5.5, 0),
fill = "cornsilk"
))
Penguin_Plot
Penguin_Plot <- ggplot(penguins, aes(Delta15N, Delta13C, color = Species)) + geom_point() + geom_encircle() + theme_minimal() + scale_color_manual(values = c("darkorange","darkorchid","cyan4")) + labs(title = "<b>Fuel economy vs. engine displacement</b><br><span style = 'font-size:10pt'>Lorem ipsum *dolor sit amet,*consectetur adipiscing elit, **sed do eiusmod tempor incididunt** ut labore et dolore magna aliqua. <span style = 'color:darkorange;'>Ut enimad minim veniam,</span> quis nostrud exercitation ullamco laboris nisiut aliquip ex ea commodo consequat.</span>") + theme(
plot.title.position = "plot",
plot.title = element_textbox_simple(
size = 13,
lineheight = 1,
padding = margin(5.5, 5.5, 5.5, 5.5),
margin = margin(0, 0, 5.5, 0),
fill = "lightblue"
))
Penguin_Plot
Penguin_Plot <- ggplot(penguins, aes(Delta15N, Delta13C, color = Species)) + geom_point() + geom_encircle() + theme_minimal() + scale_color_manual(values = c("darkorange","darkorchid","cyan4")) + labs(title = "<b>Penguin Food Webs</b><br><span style = 'font-size:14pt'>Studies of the ratios of stable carbon and nitrogen isotopes in Antartic Penguins indicate possible food preferences <span style = 'color:darkorchid;'>Chinstrap,</span> and <span style = 'color:cyan4;'>Gentoo,</span> penguins seem to feed on unique ocean food sources.  food .</span>") + theme(
plot.title.position = "plot",
plot.title = element_textbox_simple(
size = 13,
lineheight = 1,
padding = margin(5.5, 5.5, 5.5, 5.5),
margin = margin(0, 0, 5.5, 0),
fill = "lightblue"
))
Penguin_Plot
Penguin_Plot <- ggplot(penguins, aes(Delta15N, Delta13C, color = Species)) + geom_point() + geom_encircle() + theme_minimal() + scale_color_manual(values = c("darkorange","darkorchid","cyan4")) + labs(title = "<b>Penguin Food Webs</b><br><span style = 'font-size:14pt'>Studies of the ratios of stable carbon and nitrogen isotopes in Antartic Penguins indicate food preferences. <span style = 'color:darkorchid;'>Chinstrap</span> and <span style = 'color:cyan4;'>Gentoo,</span> penguins seem to feed on unique ocean food sources.  food .</span>") + theme(
plot.title.position = "plot",
plot.title = element_textbox_simple(
size = 13,
lineheight = 1,
padding = margin(5.5, 5.5, 5.5, 5.5),
margin = margin(0, 0, 5.5, 0),
fill = ""
))
Penguin_Plot
Penguin_Plot <- ggplot(penguins, aes(Delta15N, Delta13C, color = Species)) + geom_point() + geom_encircle() + theme_minimal() + scale_color_manual(values = c("darkorange","darkorchid","cyan4")) + labs(title = "<b>Penguin Food Webs</b><br><span style = 'font-size:14pt'>Studies of the ratios of stable carbon and nitrogen isotopes in Antartic Penguins indicate food preferences. <span style = 'color:darkorchid;'>Chinstrap</span> and <span style = 'color:cyan4;'>Gentoo,</span> penguins seem to feed on unique ocean food sources.  food .</span>") + theme(
plot.title.position = "plot",
plot.title = element_textbox_simple(
size = 13,
lineheight = 1,
padding = margin(5.5, 5.5, 5.5, 5.5),
margin = margin(0, 0, 5.5, 0),
fill = "NULL"
))
Penguin_Plot
Penguin_Plot <- ggplot(penguins, aes(Delta15N, Delta13C, color = Species)) + geom_point() + geom_encircle() + theme_minimal() + scale_color_manual(values = c("darkorange","darkorchid","cyan4")) + labs(title = "<b>Penguin Food Webs</b><br><span style = 'font-size:14pt'>Studies of the ratios of stable carbon and nitrogen isotopes in Antartic Penguins indicate food preferences. <span style = 'color:darkorchid;'>Chinstrap</span> and <span style = 'color:cyan4;'>Gentoo,</span> penguins seem to feed on unique ocean food sources.  food .</span>") + theme(
plot.title.position = "plot",
plot.title = element_textbox_simple(
size = 13,
lineheight = 1,
padding = margin(5.5, 5.5, 5.5, 5.5),
margin = margin(0, 0, 5.5, 0),
))
Penguin_Plot
Penguin_Plot <- ggplot(penguins, aes(Delta15N, Delta13C, color = Species)) + geom_point() + geom_encircle() + theme_minimal() + scale_color_manual(values = c("darkorange","darkorchid","cyan4")) + labs(title = "<b>Penguin Food Webs</b><br><span style = 'font-size:14pt'>The ratios of stable carbon and nitrogen isotopes in Antartic Penguins can indicate food preferences. <span style = 'color:darkorchid;'>Chinstrap</span> and <span style = 'color:cyan4;'>Gentoo,</span> penguins seem to feed on unique ocean food sources, while <span style = 'color:darkorange;'>Adelie,</span> penguins have overlap with both species.</span>") + theme(
plot.title.position = "plot",
plot.title = element_textbox_simple(
size = 13,
lineheight = 1,
padding = margin(5.5, 5.5, 5.5, 5.5),
margin = margin(0, 0, 5.5, 0),
))
Penguin_Plot
Penguin_Plot <- ggplot(penguins, aes(Delta15N, Delta13C, color = Species)) + geom_point() + geom_encircle() + theme_minimal() + scale_color_manual(values = c("darkorange","darkorchid","cyan4")) + labs(title = "<b>Penguin Food Webs</b><br><span style = 'font-size:14pt'>The ratios of stable carbon and nitrogen isotopes in Antartic Penguins can indicate food preferences. <span style = 'color:darkorchid;'>Chinstrap</span> and <span style = 'color:cyan4;'>Gentoo</span> penguins appear to feed on unique ocean food sources, while <span style = 'color:darkorange;'>Adelie</span> penguins have overlap with both other species.</span>", caption = "Data: #TidyTuesday | @Ian_Bellio ") + theme(
plot.title.position = "plot",
plot.title = element_textbox_simple(
size = 13,
lineheight = 1,
padding = margin(5.5, 5.5, 5.5, 5.5),
margin = margin(0, 0, 5.5, 0),
))
Penguin_Plot
Penguin_Plot <- ggplot(penguins, aes(Delta15N, Delta13C, color = Species)) + geom_point() + geom_encircle() + theme_minimal() + scale_color_manual(values = c("darkorange","darkorchid","cyan4")) + labs(title = "<b>Penguin Food Webs</b><br><span style = 'font-size:14pt'>The ratios of stable carbon and nitrogen isotopes in Antartic Penguins can indicate food preferences. <span style = 'color:darkorchid;'>Chinstrap</span> and <span style = 'color:cyan4;'>Gentoo</span> penguins appear to feed on unique ocean food sources, while <span style = 'color:darkorange;'>Adelie</span> penguins have overlap with both other species.</span>", caption = "Data: #TidyTuesday | @Ian_Bellio", x= expression(delta)) + theme(
plot.title.position = "plot",
plot.title = element_textbox_simple(
size = 13,
lineheight = 1,
padding = margin(5.5, 5.5, 5.5, 5.5),
margin = margin(0, 0, 5.5, 0),
))
Penguin_Plot
Penguin_Plot <- ggplot(penguins, aes(Delta15N, Delta13C, color = Species)) + geom_point() + geom_encircle() + theme_minimal() + scale_color_manual(values = c("darkorange","darkorchid","cyan4")) + labs(title = "<b>Penguin Food Webs</b><br><span style = 'font-size:14pt'>The ratios of stable carbon and nitrogen isotopes in Antartic Penguins can indicate food preferences. <span style = 'color:darkorchid;'>Chinstrap</span> and <span style = 'color:cyan4;'>Gentoo</span> penguins appear to feed on unique ocean food sources, while <span style = 'color:darkorange;'>Adelie</span> penguins have overlap with both other species.</span>", caption = "Data: #TidyTuesday | @Ian_Bellio", x= expression(delta) "Nitrogen") + theme(
plot.title.position = "plot",
plot.title = element_textbox_simple(
size = 13,
lineheight = 1,
padding = margin(5.5, 5.5, 5.5, 5.5),
margin = margin(0, 0, 5.5, 0),
))
Penguin_Plot
Penguin_Plot <- ggplot(penguins, aes(Delta15N, Delta13C, color = Species)) + geom_point() + geom_encircle() + theme_minimal() + scale_color_manual(values = c("darkorange","darkorchid","cyan4")) + labs(title = "<b>Penguin Food Webs</b><br><span style = 'font-size:14pt'>The ratios of stable carbon and nitrogen isotopes in Antartic Penguins can indicate food preferences. <span style = 'color:darkorchid;'>Chinstrap</span> and <span style = 'color:cyan4;'>Gentoo</span> penguins appear to feed on unique ocean food sources, while <span style = 'color:darkorange;'>Adelie</span> penguins have overlap with both other species.</span>", caption = "Data: #TidyTuesday | @Ian_Bellio", x= expression(delta^{15}*"Nitrogen")) + theme(
plot.title.position = "plot",
plot.title = element_textbox_simple(
size = 13,
lineheight = 1,
padding = margin(5.5, 5.5, 5.5, 5.5),
margin = margin(0, 0, 5.5, 0),
))
Penguin_Plot
Penguin_Plot <- ggplot(penguins, aes(Delta15N, Delta13C, color = Species)) + geom_point() + geom_encircle() + theme_minimal() + scale_color_manual(values = c("darkorange","darkorchid","cyan4")) + labs(title = "<b>Penguin Food Webs</b><br><span style = 'font-size:14pt'>The ratios of stable carbon and nitrogen isotopes in Antartic Penguins can indicate food preferences. <span style = 'color:darkorchid;'>Chinstrap</span> and <span style = 'color:cyan4;'>Gentoo</span> penguins appear to feed on unique ocean food sources, while <span style = 'color:darkorange;'>Adelie</span> penguins have overlap with both other species.</span>", caption = "Data: #TidyTuesday | @Ian_Bellio", x= expression(delta^{15}*" Nitrogen")) + theme(
plot.title.position = "plot",
plot.title = element_textbox_simple(
size = 13,
lineheight = 1,
padding = margin(5.5, 5.5, 5.5, 5.5),
margin = margin(0, 0, 5.5, 0),
))
Penguin_Plot
Penguin_Plot <- ggplot(penguins, aes(Delta15N, Delta13C, color = Species)) + geom_point() + geom_encircle() + theme_minimal() + scale_color_manual(values = c("darkorange","darkorchid","cyan4")) + labs(title = "<b>Penguin Food Webs</b><br><span style = 'font-size:14pt'>The ratios of stable carbon and nitrogen isotopes in Antartic Penguins can indicate food preferences. <span style = 'color:darkorchid;'>Chinstrap</span> and <span style = 'color:cyan4;'>Gentoo</span> penguins appear to feed on unique ocean food sources, while <span style = 'color:darkorange;'>Adelie</span> penguins have overlap with both other species.</span>", caption = "Data: #TidyTuesday | @Ian_Bellio", x= expression(delta^{15}*" Nitrogen"), y= expression(delta^{13}*" Carbon"))) + theme(
Penguin_Plot <- ggplot(penguins, aes(Delta15N, Delta13C, color = Species)) + geom_point() + geom_encircle() + theme_minimal() + scale_color_manual(values = c("darkorange","darkorchid","cyan4")) + labs(title = "<b>Penguin Food Webs</b><br><span style = 'font-size:14pt'>The ratios of stable carbon and nitrogen isotopes in Antartic Penguins can indicate food preferences. <span style = 'color:darkorchid;'>Chinstrap</span> and <span style = 'color:cyan4;'>Gentoo</span> penguins appear to feed on unique ocean food sources, while <span style = 'color:darkorange;'>Adelie</span> penguins have overlap with both other species.</span>", caption = "Data: #TidyTuesday | @Ian_Bellio", x= expression(delta^{15}*" Nitrogen"), y= expression(delta^{13}*" Carbon")) + theme(
plot.title.position = "plot",
plot.title = element_textbox_simple(
size = 13,
lineheight = 1,
padding = margin(5.5, 5.5, 5.5, 5.5),
margin = margin(0, 0, 5.5, 0),
))
Penguin_Plot
Penguin_Plot <- ggplot(penguins, aes(Delta15N, Delta13C, color = Species)) + geom_point() + geom_encircle() + theme_minimal() + scale_color_manual(values = c("darkorange","darkorchid","cyan4")) + labs(title = "<b>Penguin Food Webs</b><br><span style = 'font-size:14pt'>The ratios of stable carbon and nitrogen isotopes in Antartic Penguins can indicate food preferences. <span style = 'color:darkorchid;'>Chinstrap</span> and <span style = 'color:cyan4;'>Gentoo</span> penguins appear to feed on distinct ocean food sources, while <span style = 'color:darkorange;'>Adelie</span> penguins have overlap with both other species.</span>", caption = "Data: #TidyTuesday | @Ian_Bellio", x= expression(delta^{15}*" Nitrogen"), y= expression(delta^{13}*" Carbon")) + theme(
plot.title.position = "plot",
plot.title = element_textbox_simple(
size = 13,
lineheight = 1,
padding = margin(5.5, 5.5, 5.5, 5.5),
margin = margin(0, 0, 5.5, 0),
))
Penguin_Plot
Penguin_Plot <- ggplot(penguins, aes(Delta15N, Delta13C, color = Species)) + geom_point() + geom_encircle() + theme_minimal() + scale_color_manual(values = c("darkorange","darkorchid","cyan4")) + labs(title = "<b>Penguin Food Webs</b><br><span style = 'font-size:14pt'>The ratios of stable carbon and nitrogen isotopes in Antartic Penguins can indicate food preferences. <span style = 'color:darkorchid;'>Chinstrap</span> and <span style = 'color:cyan4;'>Gentoo</span> penguins appear to feed on distinct ocean food sources, while <span style = 'color:darkorange;'>Adelie</span> penguins have overlap with both other species.</span>", caption = "Data:Horst AM, Hill AP, Gorman KB (2020). palmerpenguins: Palmer Archipelago (Antarctica) penguin data. #TidyTuesday | @Ian_Bellio", x= expression(delta^{15}*" Nitrogen"), y= expression(delta^{13}*" Carbon")) + theme(
plot.title.position = "plot",
plot.title = element_textbox_simple(
size = 13,
lineheight = 1,
padding = margin(5.5, 5.5, 5.5, 5.5),
margin = margin(0, 0, 5.5, 0),
))
Penguin_Plot
Penguin_Plot <- ggplot(penguins, aes(Delta15N, Delta13C, color = Species)) + geom_point() + geom_encircle() + theme_minimal() + scale_color_manual(values = c("darkorange","darkorchid","cyan4")) + labs(title = "<b>Penguin Food Webs</b><br><span style = 'font-size:14pt'>The ratios of stable carbon and nitrogen isotopes in Antartic Penguins can indicate food preferences. <span style = 'color:darkorchid;'>Chinstrap</span> and <span style = 'color:cyan4;'>Gentoo</span> penguins appear to feed on distinct ocean food sources, while <span style = 'color:darkorange;'>Adelie</span> penguins have overlap with both other species.</span>", caption = "Data:Horst AM, Hill AP, Gorman KB (2020). palmerpenguins: Palmer\n Archipelago (Antarctica) penguin data. #TidyTuesday | @Ian_Bellio", x= expression(delta^{15}*" Nitrogen"), y= expression(delta^{13}*" Carbon")) + theme(
plot.title.position = "plot",
plot.title = element_textbox_simple(
size = 13,
lineheight = 1,
padding = margin(5.5, 5.5, 5.5, 5.5),
margin = margin(0, 0, 5.5, 0),
))
Penguin_Plot
Penguin_Plot <- ggplot(penguins, aes(Delta15N, Delta13C, color = Species)) + geom_point() + geom_encircle() + theme_minimal() + scale_color_manual(values = c("darkorange","darkorchid","cyan4")) + labs(title = "<b>Penguin Food Webs</b><br><span style = 'font-size:14pt'>The ratios of stable carbon and nitrogen isotopes in Antartic Penguins can indicate food preferences. <span style = 'color:darkorchid;'>Chinstrap</span> and <span style = 'color:cyan4;'>Gentoo</span> penguins appear to feed on distinct ocean food sources, while <span style = 'color:darkorange;'>Adelie</span> penguins have overlap with both other species.</span>", caption = "Data: Horst AM, Hill AP, Gorman KB (2020). palmerpenguins: Palmer\n Archipelago (Antarctica) penguin data. #TidyTuesday | @Ian_Bellio", x= expression(delta^{15}*" Nitrogen"), y= expression(delta^{13}*" Carbon")) + theme(
plot.title.position = "plot",
plot.title = element_textbox_simple(
size = 13,
lineheight = 1,
padding = margin(5.5, 5.5, 5.5, 5.5),
margin = margin(0, 0, 5.5, 0),
))
Penguin_Plot
ggsave("penguins.png", height= 4, width = 4, dpi = 300)
getwd
getwd()
setwd("~/Documents/GitHub/Tidy-Tuesdays/2020-07-27")
ggsave("penguins.png", height= 4, width = 4, dpi = 300)
ggsave("penguins.png", height= 6, width = 6, dpi = 300)
Penguin_Plot <- ggplot(penguins, aes(Delta15N, Delta13C, color = Species)) + geom_point() + geom_encircle() + theme_minimal() + scale_color_manual(values = c("darkorange","darkorchid","cyan4")) + labs(title = "<b>Penguin Food Webs</b><br><span style = 'font-size:14pt'>The ratios of stable carbon and nitrogen isotopes in Antartic penguins can indicate food preferences. <span style = 'color:darkorchid;'>Chinstrap</span> and <span style = 'color:cyan4;'>Gentoo</span> penguins appear to feed on distinct ocean food sources, while <span style = 'color:darkorange;'>Adelie</span> penguins have overlap with both other species.</span>", caption = "Data: Horst AM, Hill AP, Gorman KB (2020). palmerpenguins: Palmer\n Archipelago (Antarctica) penguin data. #TidyTuesday | @Ian_Bellio", x= expression(delta^{15}*" Nitrogen"), y= expression(delta^{13}*" Carbon")) + theme(
plot.title.position = "plot",
plot.title = element_textbox_simple(
size = 13,
lineheight = 1,
padding = margin(5.5, 5.5, 5.5, 5.5),
margin = margin(0, 0, 5.5, 0),
))
Penguin_Plot
ggsave("penguins.png", height= 6, width = 6, dpi = 300)
=======
filter(country == "United States") %>%
mutate(month = month(birthdate), day = day(birthdate), yday = yday(birthdate)) %>%
drop_na() %>%
group_by(yday) %>%
summarize(count = count(yday))
vb_usa <- vb_1 %>%
bind_rows(vb_2, vb_3, vb_4) %>%
distinct(., .keep_all = FALSE) %>%
filter(country == "United States") %>%
mutate(month = month(birthdate), day = day(birthdate), yday = yday(birthdate)) %>%
drop_na() %>%
group_by(yday) %>%
summarize(n = n())
View(vb_usa)
plot1 <- ggplot() + geom_line(data = vb_usa, aes(x=yday,y = n))
plot1
plot1 <- ggplot() + geom_line(data = vb_usa, aes(x=yday,y = n)) + geom_smooth(data = vb_usa, aes(x=yday,y = n))
plot1
vb_usa <- vb_1 %>%
bind_rows(vb_2, vb_3, vb_4) %>%
distinct(., .keep_all = FALSE) %>%
filter(country == "United States") %>%
mutate(month = month(birthdate), day = day(birthdate), yday = yday(birthdate)) %>%
drop_na() %>%
group_by(month) %>%
summarize(n = n())
plot1 <- ggplot() + geom_line(data = vb_usa, aes(x=month,y = n)) + geom_smooth(data = vb_usa, aes(x=month,y = n))
plot1
plot1 <- ggplot() + geom_col(data = vb_usa, aes(x=month,y = n)) + geom_smooth(data = vb_usa, aes(x=month,y = n))
plot1
vb_usa <- vb_1 %>%
bind_rows(vb_2, vb_3, vb_4) %>%
distinct(., .keep_all = FALSE) %>%
mutate(month = month(birthdate), day = day(birthdate), yday = yday(birthdate)) %>%
drop_na() %>%
group_by(month) %>%
summarize(n = n())
plot1 <- ggplot() + geom_col(data = vb_usa, aes(x=month,y = n))
plot1
vb_usa <- vb_1 %>%
bind_rows(vb_2, vb_3, vb_4) %>%
distinct(., .keep_all = FALSE) %>%
filter(country == "United States") %>%
mutate(month = month(birthdate), day = day(birthdate), yday = yday(birthdate), yweek = yweek(birthdate)) %>%
drop_na() %>%
group_by(month) %>%
summarize(n = n())
vb_usa <- vb_1 %>%
bind_rows(vb_2, vb_3, vb_4) %>%
distinct(., .keep_all = FALSE) %>%
filter(country == "United States") %>%
mutate(month = month(birthdate), day = day(birthdate), yday = yday(birthdate), yweek = week(birthdate)) %>%
drop_na() %>%
group_by(month) %>%
summarize(n = n())
vb_usa <- vb_1 %>%
bind_rows(vb_2, vb_3, vb_4) %>%
distinct(., .keep_all = FALSE) %>%
filter(country == "United States") %>%
mutate(month = month(birthdate), day = day(birthdate), yday = yday(birthdate), yweek = week(birthdate)) %>%
drop_na() %>%
group_by(yweek) %>%
summarize(n = n())
plot1 <- ggplot() + geom_col(data = vb_usa, aes(x=yweek,y = n))
plot1
=======
library(tidyverse)
# Data
individuals <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-06-23/individuals.csv')
locations <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-06-23/locations.csv')
install.packages("elevatr")
library(elevatr)
View(locations)
View(individuals)
View(individuals)
locations_elev <- select(longitude, latitude, event_id)
locations_elev <- locations %>%
select(longitude, latitude, event_id)
View(locations_elev)
elevations <- get_elev_point(locations_elev)
elevations <- get_elev_point(locations_elev, src= "epqs")
locations_elev <- locations %>%
select(longitude, latitude)
elevations <- get_elev_point(locations_elev, src= "epqs")
locations_elev = as(locations_elev, "Spatial")
install.packages("rgbif")
library(rgbif)
locations_elev <- locations %>%
select(longitude, latitude, event_id)
new_elev <- elevation(input = locations, latitude = latitude, longitude = longitude, elevation_model = "srtm3", username = "envirooviwc")
new_elev <- elevation(input = locations, latitude = "latitude", longitude = "longitude", elevation_model = "srtm3", username = "envirooviwc")
new_elev <- elevation(latitude = locations$latitude, longitude = locations$longitude, elevation_model = "srtm3", username = "envirooviwc")
new_elev <- elevation(latitude = locations$latitude, longitude = locations$longitude, username = "envirooviwc")
new_elev <- elevation(latitude = locations$latitude, longitude = locations$longitude, username = "envirooviwc")
locations_elev <- locations %>%
select(longitude, latitude, event_id) %>%
top_n(50)
new_elev <- elevation(latitude = locations_elev$latitude, longitude = locations_elev$longitude, username = "envirooviwc")
new_elev <- elevation(latitude = locations_elev$latitude, longitude = locations_elev$longitude, username = "envirooviwc")
View(new_elev)
new_elev <- elevation(latitude = locations$latitude, longitude = locations$longitude, username = "envirooviwc")
View(new_elev)
locations_elev1 <- locations %>%
select(longitude, latitude, event_id) %>%
top_n(1000)
new_elev <- elevation(latitude = locations$latitude, longitude = locations$longitude, username = "envirooviwc")
locations_elev1 <- locations %>%
select(longitude, latitude, event_id) %>%
top_n(1000)
new_elev <- elevation(latitude = locations_elev$latitude, longitude = locations_elev$longitude, username = "envirooviwc")
locations_elev1 <- locations %>%
select(longitude, latitude, event_id) %>%
top_n(1000)
new_elev <- elevation(latitude = locations_elev1$latitude, longitude = locations_elev1$longitude, username = "envirooviwc")
View(new_elev)
View(new_elev)
View(individuals)
View(locations)
locations_weekly <- locations %>%
mutate(week = week(timestamp))
library(lubridate)
locations_weekly <- locations %>%
mutate(week = week(timestamp), year = year(timestamp))
View(locations_weekly)
locations_weekly <- locations %>%
mutate(week = week(timestamp), year = year(timestamp)) %>%
group_by(animal_id) %>%
summarise(wk_lat = mean(latitude), wk_long = mean(longitude))
View(locations_weekly)
locations_weekly <- locations %>%
mutate(week = week(timestamp), year = year(timestamp)) %>%
group_by(animal_id, week, year) %>%
summarise(wk_lat = mean(latitude), wk_long = mean(longitude))
View(locations_weekly)
locations_weekly <- locations %>%
mutate(week = week(timestamp), year = year(timestamp)) %>%
group_by(animal_id, week, year, study_site) %>%
summarise(wk_lat = mean(latitude), wk_long = mean(longitude))
new_elev <- elevation(latitude = locations_weekly$latitude, longitude = locations_weekly$longitude, username = "envirooviwc")
new_elev <- elevation(latitude = locations_weekly$wk_lat, longitude = locations_weekly$wk_long, username = "envirooviwc")
caribou_elev <- inner_join(new_elev, locations_weekly)
caribou_elev <- inner_join(new_elev, locations_weekly, by = c(wk_lat, latitude))
caribou_elev <- inner_join(new_elev, locations_weekly, by = c("wk_lat", "latitude"))
caribou_elev <- inner_join(new_elev, locations_weekly, by = c("latitude" = "wk_lat"))
View(caribou_elev)
caribou_elev <- inner_join(new_elev, locations_weekly, by = c("latitude" = "wk_lat", "longitude" = "wk_long"))
caribou_elev <- inner_join(new_elev, locations_weekly, by = c("latitude" = "wk_lat", "longitude" = "wk_long"))
caribou_elev <- outer_join(new_elev, locations_weekly, by = c("latitude" = "wk_lat", "longitude" = "wk_long"))
caribou_elev <- full_join(new_elev, locations_weekly, by = c("latitude" = "wk_lat", "longitude" = "wk_long"))
View(caribou_elev)
caribou_elev <- left_join(new_elev, locations_weekly, by = c("latitude" = "wk_lat", "longitude" = "wk_long"))
caribou_elev <- left_join(new_elev, locations_weekly, by = c(, "longitude" = "wk_long"))
caribou_elev <- left_join(new_elev, locations_weekly, by = c( "longitude" = "wk_long"))
caribou_elev <- right_join(new_elev, locations_weekly, by = c( "longitude" = "wk_long"))
caribou_elev <- semi_join(new_elev, locations_weekly, by = c( "longitude" = "wk_long"))
View(caribou_elev)
caribou_elev <- semi_join(locations_weekly,new_elev,  by = c( "wk_long" = "longitude"))
View(caribou_elev)
caribou_elev <- inner_join(locations_weekly,new_elev,  by = c( "wk_long" = "longitude"))
View(new_elev)
View(locations_weekly)
View(new_elev)
View(locations_weekly)
View(locations_weekly)
View(new_elev)
caribou_elev <- bind_rows(locations_weekly, new_elev)
View(caribou_elev)
caribou_elev <- bind_cols(locations_weekly, new_elev)
View(caribou_elev)
locations_weekly <- locations %>%
mutate(week = week(timestamp), year = year(timestamp), isoweek = isoweek(timestamp)) %>%
group_by(animal_id, week, year, study_site) %>%
summarise(wk_lat = mean(latitude), wk_long = mean(longitude))
View(locations_weekly)
locations_weekly <- locations %>%
mutate(week = week(timestamp), year = year(timestamp), isoweek = isoweek(timestamp)) %>%
group_by(animal_id, week, year, study_site) %>%
summarise(wk_lat = mean(latitude), wk_long = mean(longitude))
locations_weekly <- locations %>%
mutate(week = week(timestamp), year = year(timestamp), isoweek = isoweek(timestamp)) %>%
group_by(animal_id, week, year, isoweek, study_site) %>%
summarise(wk_lat = mean(latitude), wk_long = mean(longitude))
View(locations_weekly)
class(locations_weekly$week)
class(locations_weekly$isoweek)
locations_weekly <- locations %>%
mutate(week = week(timestamp), year = year(timestamp), c_week = ceiling_date(timestamp, unit = "week"))
View(locations_weekly)
locations_weekly <- locations %>%
mutate(week = week(timestamp), year = year(timestamp), c_week = ceiling_date(timestamp, unit = "week")) %>%
group_by(animal_id, week, year, c_week, study_site) %>%
summarise(wk_lat = mean(latitude), wk_long = mean(longitude))
locations_weekly <- locations %>%
mutate(week = week(timestamp), year = year(timestamp), c_week = ceiling_date(timestamp, unit = "week")) %>%
group_by(animal_id,c_week, study_site) %>%
summarise(wk_lat = mean(latitude), wk_long = mean(longitude))
View(locations_weekly)
new_elev <- elevation(latitude = locations_weekly$wk_lat, longitude = locations_weekly$wk_long, username = "envirooviwc")
caribou_elev <- bind_cols(locations_weekly, new_elev)
Elev_plot <- ggplot(data = caribou_elev) + geom_line(x=c_week, y= elevation)
View(caribou_elev)
Elev_plot <- ggplot(data = caribou_elev) + geom_line(x=c_week, y= elevation_geonames)
Elev_plot <- ggplot(data = caribou_elev) + geom_line(aes(x=c_week, y= elevation_geonames, color= animal_id))
Elev_plot
Elev_plot <- ggplot(data = caribou_elev) + geom_line(aes(x=c_week, y= elevation_geonames))
Elev_plot
caribou_elev <- bind_cols(locations_weekly, new_elev) %>%
mutate(year = year(c_week)) %>%
filter(year >= 2001)
Elev_plot <- ggplot(data = caribou_elev) + geom_line(aes(x=c_week, y= elevation_geonames))
Elev_plot
Elev_plot <- ggplot(data = caribou_elev) + geom_line(aes(x=c_week, y= elevation_geonames)) + facet_wrap(~study_site)
Elev_plot
Elev_plot <- ggplot(data = caribou_elev) + geom_line(aes(x=c_week, y= elevation_geonames, color = latitude)) + facet_wrap(~study_site)
Elev_plot
Elev_plot <- ggplot(data = caribou_elev) + geom_line(aes(x=c_week, y= elevation_geonames, color = longitude)) + facet_wrap(~study_site)
Elev_plot
install.packages("moveVis")
library(moveVis)
library(move)
install.packages("moveVis")
yes
install.packages("moveVis")
library(moveVis)
install.packages("magick")
library(moveVis)
install.packages("magick")
library(moveVis)
library(move)
install.packages("move")
library(move)
library(moveVis)
data("locations", package = "moveVis")
locations <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-06-23/locations.csv')
data("locations", package = "moveVis")
m <- align_move(locations, res = 4 , unit = "mins")
movedata <- df2move(locations, x= latitude, y=longitude, time = timestamp)
movedata <- df2move(locations, x= latitude, y=longitude, proj = "WGS84" time = timestamp)
data("locations", package = "moveVis")
movedata <- df2move(locations, x= latitude, y=longitude, proj = "WGS84", time = timestamp)
movedata <- df2move(locations, x= latitude, y=longitude, proj = 4326, time = timestamp)
movedata <- df2move(locations, x= "latitude", y="longitude", proj = 4326, time = timestamp)
movedata <- df2move(locations, x= "latitude", y="longitude", proj = 4326, time = timestamp, track_id = "animal_id")
movedata <- df2move(locations, x= "latitude", y="longitude", proj = 4326, time = "timestamp", track_id = "animal_id")
>>>>>>> f4590913db2b6c1da4757cc684734c0f0551920f
library(tidyverse)
#Data
energy_types <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-08-04/energy_types.csv')
country_totals <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-08-04/energy_types.csv')
View(energy_types)
View(country_totals)
poulation <- UNdata_Export_20200803_210212723 <- read_csv("2020-08-03/UNdata_Export_20200803_210212723.csv", col_types = cols(`Year(s)` = col_date(format = "%Y")))
View(poulation)
#Tidy
population <- population %>%
mutate(Population = Value * 1000)
population <- UNdata_Export_20200803_210212723 <- read_csv("2020-08-03/UNdata_Export_20200803_210212723.csv", col_types = cols(`Year(s)` = col_date(format = "%Y")))
#Tidy
population <- population %>%
mutate(Population = Value * 1000)
View(population)
country_totals <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-08-04/country_totals.csv')
View(country_totals)
?case_when
country_totals <- country_totals %>%
case_when(country == EL ~ country_name == "Greece")
country_totals <- country_totals %>%
mutate(country_name = case_when(country == EL ~ "Greece"))
country_totals <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-08-04/country_totals.csv')
country_totals <- country_totals %>%
mutate(country_name = case_when(country == EL ~ "Greece"))
country_totals <- country_totals %>%
mutate(country_name = case_when(country == "EL" ~ "Greece"))
country_totals <- country_totals %>%
mutate(country_name = case_when(country == "EL" ~ "Greece", country == "UK" ~ "United Kingdom", TRUE ~ county))
country_totals <- country_totals %>%
mutate(country_name = case_when(country == "EL" ~ "Greece", country == "UK" ~ "United Kingdom", TRUE ~ country))
country_totals <- country_totals %>%
mutate(country_name = case_when(country == "EL" ~ "Greece", country == "UK" ~ "United Kingdom", TRUE ~ country_name))
country_totals <- country_totals %>%
mutate(country_name = case_when(country == "EL" ~ "Greece", country == "UK" ~ "United Kingdom", TRUE ~ country))
country_totals <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-08-04/country_totals.csv')
country_totals <- country_totals %>%
mutate(country_name = case_when(country == "EL" ~ "Greece", country == "UK" ~ "United Kingdom", TRUE ~ country_name))
country_totals <- country_totals %>%
mutate(country_name = case_when(country == "EL" ~ "Greece", country == "UK" ~ "United Kingdom", TRUE ~ country_name)) %>%
filter(type == "Total net production")
#Tidy
population <- population %>%
mutate(Population = Value * 1000) %>%
select(`Country or Area`, Population)
View(population)
population <- read_csv("2020-08-03/UNdata_Export_20200803_210212723.csv", col_types = cols(`Year(s)` = col_date(format = "%Y")))
View(population)
population <- read_csv("2020-08-03/UNdata_Export_20200803_210212723.csv")
View(population)
View(energy_types)
View(country_totals)
#Tidy
population <- population %>%
mutate(Population = Value * 1000) %>%
select(`Country or Area`, Year(s), Population)
#Tidy
population <- population %>%
mutate(Population = Value * 1000) %>%
select(`Country or Area`, `Year(s)`, Population)
View(population)
country_totals <- country_totals %>%
mutate(country_name = case_when(country == "EL" ~ "Greece", country == "UK" ~ "United Kingdom", TRUE ~ country_name)) %>%
filter(type == "Total net production") %>%
pivot_longer()
country_totals <- country_totals %>%
mutate(country_name = case_when(country == "EL" ~ "Greece", country == "UK" ~ "United Kingdom", TRUE ~ country_name)) %>%
filter(type == "Total net production") %>%
pivot_longer(-county,names_to = "Contry", values_to = "Energy")
country_totals <- country_totals %>%
mutate(country_name = case_when(country == "EL" ~ "Greece", country == "UK" ~ "United Kingdom", TRUE ~ country_name)) %>%
filter(type == "Total net production") %>%
pivot_longer(-country,names_to = "Contry", values_to = "Energy")
country_totals <- country_totals %>%
mutate(country_name = case_when(country == "EL" ~ "Greece", country == "UK" ~ "United Kingdom", TRUE ~ country_name)) %>%
filter(type == "Total net production") %>%
pivot_longer(names_to = "Country", values_to = "Energy")
country_totals <- country_totals %>%
mutate(country_name = case_when(country == "EL" ~ "Greece", country == "UK" ~ "United Kingdom", TRUE ~ country_name)) %>%
filter(type == "Total net production") %>%
pivot_longer(cols = c(3,5:7), names_to = "Country", values_to = "Energy")
country_totals <- country_totals %>%
mutate(country_name = case_when(country == "EL" ~ "Greece", country == "UK" ~ "United Kingdom", TRUE ~ country_name)) %>%
filter(type == "Total net production") %>%
pivot_longer(cols = c(5:7), names_to = "Country", values_to = "Energy")
#Tidy
population <- population %>%
mutate(Population = Value * 1000) %>%
rename(`Country or Area` = "country") %>%
select(country, `Year(s)`, Population)
population <- read_csv("2020-08-03/UNdata_Export_20200803_210212723.csv")
#Tidy
population <- population %>%
mutate(Population = Value * 1000) %>%
rename(`Country or Area` = "country") %>%
select(country, `Year(s)`, Population)
#Tidy
population <- population %>%
mutate(Population = Value * 1000) %>%
rename(country = `Country or Area`, Year = `Year(s)`) %>%
select(country, Year, Population)
country_totals <- country_totals %>%
mutate(country_name = case_when(country == "EL" ~ "Greece", country == "UK" ~ "United Kingdom", TRUE ~ country_name)) %>%
filter(type == "Total net production") %>%
pivot_longer(cols = c(5:7), names_to = "Year", values_to = "Energy") %>%
left_join(population, by = c("country", "Year"))
country_totals <- country_totals %>%
mutate(country_name = case_when(country == "EL" ~ "Greece", country == "UK" ~ "United Kingdom", TRUE ~ country_name)) %>%
filter(type == "Total net production") %>%
pivot_longer(cols = c(5:7), names_to = "Year", values_to = "Energy") %>%
left_join(.,population, by = c("country", "Year"))
country_totals <- country_totals %>%
mutate(country_name = case_when(country == "EL" ~ "Greece", country == "UK" ~ "United Kingdom", TRUE ~ country_name)) %>%
filter(type == "Total net production") %>%
pivot_longer(cols = c(5:7), names_to = "Year", values_to = "Energy") %>%
left_join(.,population, by = "country"))
country_totals <- country_totals %>%
mutate(country_name = case_when(country == "EL" ~ "Greece", country == "UK" ~ "United Kingdom", TRUE ~ country_name)) %>%
filter(type == "Total net production") %>%
pivot_longer(cols = c(5:7), names_to = "Year", values_to = "Energy") %>%
left_join(.,population, by = "country")
country_totals <- country_totals %>%
mutate(country_name = case_when(country == "EL" ~ "Greece", country == "UK" ~ "United Kingdom", TRUE ~ country_name)) %>%
filter(type == "Total net production") %>%
pivot_longer(cols = c(5:7), names_to = "Year", values_to = "Energy") %>%
left_join(population, by = "country")
country_totals <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-08-04/country_totals.csv')
country_totals <- country_totals %>%
mutate(country_name = case_when(country == "EL" ~ "Greece", country == "UK" ~ "United Kingdom", TRUE ~ country_name)) %>%
filter(type == "Total net production") %>%
pivot_longer(cols = c(5:7), names_to = "Year", values_to = "Energy")
country_totals <- country_totals %>%
mutate(country_name = case_when(country == "EL" ~ "Greece", country == "UK" ~ "United Kingdom", TRUE ~ country_name)) %>%
filter(type == "Total net production") %>%
pivot_longer(cols = c(5:7), names_to = "Year", values_to = "Energy") %>%
left_join(.,population, by = c("country_name", "country"))
country_totals <- country_totals %>%
mutate(country_name = case_when(country == "EL" ~ "Greece", country == "UK" ~ "United Kingdom", TRUE ~ country_name)) %>%
filter(type == "Total net production") %>%
pivot_longer(cols = c(5:7), names_to = "Year", values_to = "Energy") %>%
left_join(population, by = c("country_name", "country"))
country_totals <- country_totals %>%
mutate(country_name = case_when(country == "EL" ~ "Greece", country == "UK" ~ "United Kingdom", TRUE ~ country_name)) %>%
filter(type == "Total net production") %>%
pivot_longer(cols = c(5:7), names_to = "Year", values_to = "Energy") %>%
left_join(population, by = c("country_name" = "country"))
country_totals <- country_totals %>%
mutate(country_name = case_when(country == "EL" ~ "Greece", country == "UK" ~ "United Kingdom", TRUE ~ country_name)) %>%
filter(type == "Total net production") %>%
pivot_longer(cols = c(5:7), names_to = "Year", values_to = "Energy") %>%
left_join(.,population, by = c("country_name" = "country"))
country_totals <- country_totals %>%
mutate(country_name = case_when(country == "EL" ~ "Greece", country == "UK" ~ "United Kingdom", TRUE ~ country_name)) %>%
filter(type == "Total net production") %>%
pivot_longer(cols = c(5:7), names_to = "Year", values_to = "Energy") %>%
left_join(.,population, by = c("country" = "country_name"))
country_totals <- country_totals %>%
mutate(country_name = case_when(country == "EL" ~ "Greece", country == "UK" ~ "United Kingdom", TRUE ~ country_name)) %>%
filter(type == "Total net production") %>%
pivot_longer(cols = c(5:7), names_to = "Year", values_to = "Energy") %>%
left_join(.,population, by = c("country" = "country_name"))
country_totals <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-08-04/country_totals.csv')
country_totals <- country_totals %>%
mutate(country_name = case_when(country == "EL" ~ "Greece", country == "UK" ~ "United Kingdom", TRUE ~ country_name)) %>%
filter(type == "Total net production") %>%
pivot_longer(cols = c(5:7), names_to = "Year", values_to = "Energy")
country_totals <- country_totals %>%
mutate(country_name = case_when(country == "EL" ~ "Greece", country == "UK" ~ "United Kingdom", TRUE ~ country_name)) %>%
filter(type == "Total net production") %>%
pivot_longer(cols = c(5:7), names_to = "Year", values_to = "Energy") %>%
left_join(.,population, by = c("country" = "country_name", "Year" = "year"))
country_totals <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-08-04/country_totals.csv')
>>>>>>> 26d12aa339e597657618c9a5ba85f27391d0dd70
country_total <- country_totals %>%
mutate(country_name = case_when(country == "EL" ~ "Greece", country == "UK" ~ "United Kingdom", country == "BA" ~ "Bosnia and Herzegovina", TRUE ~ country_name)) %>%
filter(type == "Total net production") %>%
pivot_longer(cols = c(5:7), names_to = "Year", values_to = "Energy") %>%
mutate(Year = as.numeric(Year))%>%
left_join(.,population, by = c("country_name" = "country", "Year" = "Year")) %>%
mutate(per_cap = Energy / Population, Rank = rank(per_cap)) %>%
filter(Year == "2018") %>%
arrange(-per_cap) %>%
top_n(10)
View(country_total)
country_total <- country_totals %>%
mutate(country_name = case_when(country == "EL" ~ "Greece", country == "UK" ~ "United Kingdom", country == "BA" ~ "Bosnia and Herzegovina", TRUE ~ country_name)) %>%
filter(type == "Total net production") %>%
pivot_longer(cols = c(5:7), names_to = "Year", values_to = "Energy") %>%
mutate(Year = as.numeric(Year))%>%
left_join(.,population, by = c("country_name" = "country", "Year" = "Year")) %>%
mutate(per_cap = Energy / Population) %>%
mutate(Rank = rank(per_cap)) %>%
filter(Year == "2018") %>%
arrange(-per_cap) %>%
top_n(10)
View(country_total)
country_total <- country_totals %>%
mutate(country_name = case_when(country == "EL" ~ "Greece", country == "UK" ~ "United Kingdom", country == "BA" ~ "Bosnia and Herzegovina", TRUE ~ country_name)) %>%
filter(type == "Total net production") %>%
pivot_longer(cols = c(5:7), names_to = "Year", values_to = "Energy") %>%
mutate(Year = as.numeric(Year))%>%
left_join(.,population, by = c("country_name" = "country", "Year" = "Year")) %>%
mutate(per_cap = Energy / Population) %>%
filter(Year == "2018") %>%
arrange(-per_cap) %>%
mutate(rank = 1:nrow()) %>%
top_n(10)
country_total <- country_totals %>%
mutate(country_name = case_when(country == "EL" ~ "Greece", country == "UK" ~ "United Kingdom", country == "BA" ~ "Bosnia and Herzegovina", TRUE ~ country_name)) %>%
filter(type == "Total net production") %>%
pivot_longer(cols = c(5:7), names_to = "Year", values_to = "Energy") %>%
mutate(Year = as.numeric(Year))%>%
left_join(.,population, by = c("country_name" = "country", "Year" = "Year")) %>%
mutate(per_cap = Energy / Population) %>%
filter(Year == "2018") %>%
arrange(-per_cap) %>%
mutate(rank = 1:nrow(.)) %>%
top_n(10)
View(country_total)
country_total <- country_totals %>%
mutate(country_name = case_when(country == "EL" ~ "Greece", country == "UK" ~ "United Kingdom", country == "BA" ~ "Bosnia and Herzegovina", TRUE ~ country_name)) %>%
filter(type == "Total net production") %>%
pivot_longer(cols = c(5:7), names_to = "Year", values_to = "Energy") %>%
mutate(Year = as.numeric(Year))%>%
left_join(.,population, by = c("country_name" = "country", "Year" = "Year")) %>%
mutate(per_cap = Energy / Population) %>%
filter(Year == "2018") %>%
arrange(-per_cap) %>%
mutate(rank = 1:nrow(.)) %>%
top_n(-10)
View(country_total)
table <- gt(country_total) %>%
tab_header(title = "Per Capita European Energy Production", subtitle = "2018 total net energy production, top ten displayed") %>%
cols_hide(c("country", "type", "level" , "Year")) %>%
cols_label(country_name = "Country", Energy = "Net Energy\n Production (GWh)", per_cap = "Per Capita\n Energy Production")
table
table <- gt(country_total) %>%
tab_header(title = "Per Capita European Energy Production", subtitle = "2018 total net energy production, top ten displayed") %>%
cols_hide(c("country", "type", "level" , "Year")) %>%
cols_move_to_start("rank") %>%
cols_label(country_name = "Country", Energy = "Net Energy\n Production (GWh)", per_cap = "Per Capita\n Energy Production")
table
table <- gt(country_total) %>%
tab_header(title = "Per Capita European Energy Production", subtitle = "2018 total net energy production, top ten displayed") %>%
cols_hide(c("country", "type", "level" , "Year")) %>%
cols_move_to_start("rank") %>%
cols_label(rank = "", country_name = "Country", Energy = "Net Energy\n Production (GWh)", per_cap = "Per Capita\n Energy Production")
table
table <- gt(country_total) %>%
tab_header(title = "Per Capita European Energy Production", subtitle = "2018 total net energy production, top ten displayed") %>%
cols_hide(c("country", "type", "level" , "Year")) %>%
cols_move_to_start("rank") %>%
cols_label(rank = "", country_name = "Country", Energy = "Net Energy\n Production (GWh)", per_cap = "Per Capita\n Energy Production") %>%
fmt_number(columns = 3:4, decimals = 0, use_seps = TRUE)
table
class(country_total$Energy)
class(country_total$Population)
table <- gt(country_total) %>%
tab_header(title = "Per Capita European Energy Production", subtitle = "2018 total net energy production, top ten displayed") %>%
cols_hide(c("country", "type", "level" , "Year")) %>%
cols_move_to_start("rank") %>%
cols_label(rank = "", country_name = "Country", Energy = "Net Energy\n Production (GWh)", per_cap = "Per Capita\n Energy Production") %>%
fmt_number(columns = 3, decimals = 0, use_seps = TRUE)
table
table <- gt(country_total) %>%
tab_header(title = "Per Capita European Energy Production", subtitle = "2018 total net energy production, top ten displayed") %>%
cols_hide(c("country", "type", "level" , "Year")) %>%
cols_move_to_start("rank") %>%
cols_label(rank = "", country_name = "Country", Energy = "Net Energy\n Production (GWh)", per_cap = "Per Capita\n Energy Production") %>%
fmt(columns = 3:4, decimals = 0, use_seps = TRUE)
table <- gt(country_total) %>%
tab_header(title = "Per Capita European Energy Production", subtitle = "2018 total net energy production, top ten displayed") %>%
cols_hide(c("country", "type", "level" , "Year")) %>%
cols_move_to_start("rank") %>%
cols_label(rank = "", country_name = "Country", Energy = "Net Energy\n Production (GWh)", per_cap = "Per Capita\n Energy Production") %>%
fmt_number(columns = vars(3:4), decimals = 0, use_seps = TRUE)
table
table <- gt(country_total) %>%
tab_header(title = "Per Capita European Energy Production", subtitle = "2018 total net energy production, top ten displayed") %>%
cols_hide(c("country", "type", "level" , "Year")) %>%
cols_move_to_start("rank") %>%
cols_label(rank = "", country_name = "Country", Energy = "Net Energy\n Production (GWh)", per_cap = "Per Capita\n Energy Production") %>%
fmt_number(columns = vars(Population), decimals = 0, use_seps = TRUE)
table
table <- gt(country_total) %>%
tab_header(title = "Per Capita European Energy Production", subtitle = "2018 total net energy production, top ten displayed") %>%
cols_hide(c("country", "type", "level" , "Year")) %>%
cols_move_to_start("rank") %>%
cols_label(rank = "", country_name = "Country", Energy = "Net Energy Production (GWh)", per_cap = "Per Capita\n Energy Production") %>%
fmt_number(columns = c("Population", "Net Energy Production (GWh)"), decimals = 0, use_seps = TRUE)
table <- gt(country_total) %>%
tab_header(title = "Per Capita European Energy Production", subtitle = "2018 total net energy production, top ten displayed") %>%
cols_hide(c("country", "type", "level" , "Year")) %>%
cols_move_to_start("rank") %>%
cols_label(rank = "", country_name = "Country", Energy = "Net Energy Production (GWh)", per_cap = "Per Capita\n Energy Production") %>%
fmt_number(columns = c("Population", "Energy"), decimals = 0, use_seps = TRUE)
table
table <- gt(country_total) %>%
tab_header(title = "Per Capita European Energy Production", subtitle = "2018 total net energy production, top ten displayed") %>%
cols_hide(c("country", "type", "level" , "Year")) %>%
cols_move_to_start("rank") %>%
cols_label(rank = "", country_name = "Country", Energy = "Net Energy Production (GWh)", per_cap = "Per Capita\n Energy Production") %>%
fmt_number(columns = c("Population", "Energy"), decimals = 0, use_seps = TRUE) %>%
tab_style(
style = list(
cell_fill(color = "lightcyan"),
"font-variant: small-caps;"
),
locations = cells_body(columns = vars(per_cap))
)
table
table <- gt(country_total) %>%
tab_header(title = "Per Capita European Energy Production", subtitle = "2018 total net energy production, top ten displayed") %>%
cols_hide(c("country", "type", "level" , "Year")) %>%
cols_move_to_start("rank") %>%
cols_label(rank = "", country_name = "Country", Energy = "Net Energy Production (GWh)", per_cap = "Per Capita\n Energy Production") %>%
fmt_number(columns = c("Population", "Energy"), decimals = 0, use_seps = TRUE) %>%
tab_style(style = list(cell_fill(color = "lightcyan"),"font-variant: small-caps;"),locations = cells_body(columns = vars(per_cap)))
table
country_total <- country_totals %>%
mutate(country_name = case_when(country == "EL" ~ "Greece", country == "UK" ~ "United Kingdom", country == "BA" ~ "Bosnia and Herzegovina", TRUE ~ country_name)) %>%
filter(type == "Total net production") %>%
pivot_longer(cols = c(5:7), names_to = "Year", values_to = "Energy") %>%
mutate(Year = as.numeric(Year))%>%
left_join(.,population, by = c("country_name" = "country", "Year" = "Year")) %>%
mutate(per_cap = (Energy / Population) * 1000) %>%
filter(Year == "2018") %>%
arrange(-per_cap) %>%
mutate(rank = 1:nrow(.)) %>%
top_n(-10)
table <- gt(country_total) %>%
tab_header(title = "Per Capita European Energy Production", subtitle = "2018 total net energy production, top ten displayed") %>%
cols_hide(c("country", "type", "level" , "Year")) %>%
cols_move_to_start("rank") %>%
cols_label(rank = "", country_name = "Country", Energy = "Net Energy Production (GWh)", per_cap = "Per Capita\n Energy Production") %>%
fmt_number(columns = c("Population", "Energy"), decimals = 0, use_seps = TRUE) %>%
tab_style(style = list(cell_fill(color = "lightcyan"),"font-variant: small-caps;"),locations = cells_body(columns = vars(per_cap)))
table <- gt(country_total) %>%
tab_header(title = "Per Capita European Energy Production", subtitle = "2018 total net energy production, top ten displayed") %>%
cols_hide(c("country", "type", "level" , "Year")) %>%
cols_move_to_start("rank") %>%
cols_label(rank = "", country_name = "Country", Energy = "Net Energy Production (GWh)", per_cap = "Per Capita\n Energy Production") %>%
fmt_number(columns = c("Population", "Energy"), decimals = 0, use_seps = TRUE)
table
table <- gt(country_total) %>%
tab_header(title = "Per Capita European Energy Production", subtitle = "2018 total net energy production, top ten displayed") %>%
cols_hide(c("country", "type", "level" , "Year")) %>%
cols_move_to_start("rank") %>%
cols_label(rank = "", country_name = "Country", Energy = "Net Energy Production (GWh)", per_cap = "Per Capita Energy Production (MWh/person)") %>%
fmt_number(columns = c("Population", "Energy"), decimals = 0, use_seps = TRUE)
table
table <- gt(country_total) %>%
tab_header(title = "Per Capita European Energy Production", subtitle = "2018 total net energy production, top ten displayed") %>%
cols_hide(c("country", "type", "level" , "Year")) %>%
cols_move_to_start("rank") %>%
cols_label(rank = "", country_name = "Country", Energy = "Net Energy Production (GWh)", per_cap = "Per Capita Energy Production (MWh/person)") %>%
fmt_number(columns = c("Population", "Energy"), decimals = 0, use_seps = TRUE) %>%
tab_options(
table.background.color = "lightcyan"
)
table
table <- gt(country_total) %>%
tab_header(title = "Per Capita European Energy Production", subtitle = "2018 total net energy production, top ten displayed") %>%
cols_hide(c("country", "type", "level" , "Year")) %>%
cols_move_to_start("rank") %>%
cols_label(rank = "", country_name = "Country", Energy = "Net Energy Production (GWh)", per_cap = "Per Capita Energy Production (MWh/person)") %>%
fmt_number(columns = c("Population", "Energy"), decimals = 0, use_seps = TRUE) %>%
tab_options(table.background.color = "lightcyan") %>%
tab_style(cell_text(style = "bold"), columns = per_cap))
table <- gt(country_total) %>%
tab_header(title = "Per Capita European Energy Production", subtitle = "2018 total net energy production, top ten displayed") %>%
cols_hide(c("country", "type", "level" , "Year")) %>%
cols_move_to_start("rank") %>%
cols_label(rank = "", country_name = "Country", Energy = "Net Energy Production (GWh)", per_cap = "Per Capita Energy Production (MWh/person)") %>%
fmt_number(columns = c("Population", "Energy"), decimals = 0, use_seps = TRUE) %>%
tab_options(table.background.color = "lightcyan") %>%
tab_style(cell_text(style = "bold"), columns = per_cap)
table <- gt(country_total) %>%
tab_header(title = "Per Capita European Energy Production", subtitle = "2018 total net energy production, top ten displayed") %>%
cols_hide(c("country", "type", "level" , "Year")) %>%
cols_move_to_start("rank") %>%
cols_label(rank = "", country_name = "Country", Energy = "Net Energy Production (GWh)", per_cap = "Per Capita Energy Production (MWh/person)") %>%
fmt_number(columns = c("Population", "Energy"), decimals = 0, use_seps = TRUE) %>%
tab_options(table.background.color = "lightcyan") %>%
tab_style(cell_text(style = "bold"), columns = "per_cap")
table
table <- gt(country_total) %>%
tab_header(title = "Per Capita European Energy Production", subtitle = "2018 total net energy production, top ten displayed") %>%
cols_hide(c("country", "type", "level" , "Year")) %>%
cols_move_to_start("rank") %>%
cols_label(rank = "", country_name = "Country", Energy = "Net Energy Production (GWh)", per_cap = "Per Capita Energy Production (MWh/person)") %>%
fmt_number(columns = c("Population", "Energy"), decimals = 0, use_seps = TRUE) %>%
tab_options(table.background.color = "lightcyan") %>%
tab_style(cell_text(style = "bold"), cells_title("per_cap"))
table <- gt(country_total) %>%
tab_header(title = "Per Capita European Energy Production", subtitle = "2018 total net energy production, top ten displayed") %>%
cols_hide(c("country", "type", "level" , "Year")) %>%
cols_move_to_start("rank") %>%
cols_label(rank = "", country_name = "Country", Energy = "Net Energy Production (GWh)", per_cap = "Per Capita Energy Production (MWh/person)") %>%
fmt_number(columns = c("Population", "Energy"), decimals = 0, use_seps = TRUE) %>%
tab_options(table.background.color = "lightcyan") %>%
tab_style(cell_text(style = "oblique"), cells_title("per_cap"))
table
table <- gt(country_total) %>%
tab_header(title = "Per Capita European Energy Production", subtitle = "2018 total net energy production, top ten displayed") %>%
cols_hide(c("country", "type", "level" , "Year")) %>%
cols_move_to_start("rank") %>%
cols_label(rank = "", country_name = "Country", Energy = "Net Energy Production (GWh)", per_cap = "Per Capita Energy Production (MWh/person)") %>%
fmt_number(columns = c("Population", "Energy"), decimals = 0, use_seps = TRUE) %>%
tab_options(table.background.color = "lightcyan") %>%
tab_style(cell_text(style = "italic"), cells_title("per_cap"))
table
table <- gt(country_total) %>%
tab_header(title = "Per Capita European Energy Production", subtitle = "2018 total net energy production, top ten displayed") %>%
cols_hide(c("country", "type", "level" , "Year")) %>%
cols_move_to_start("rank") %>%
cols_label(rank = "", country_name = "Country", Energy = "Net Energy Production (GWh)", per_cap = "Per Capita Energy Production (MWh/person)") %>%
fmt_number(columns = c("Population", "Energy"), decimals = 0, use_seps = TRUE) %>%
tab_options(table.background.color = "lightcyan") %>%
tab_style(cell_text(style = "italic"), locations = cells_title("per_cap"))
table
table <- gt(country_total) %>%
tab_header(title = "Per Capita European Energy Production", subtitle = "2018 total net energy production, top ten displayed") %>%
cols_hide(c("country", "type", "level" , "Year")) %>%
cols_move_to_start("rank") %>%
cols_label(rank = "", country_name = "Country", Energy = "Net Energy Production (GWh)", per_cap = "Per Capita Energy Production (MWh/person)") %>%
fmt_number(columns = c("Population", "Energy"), decimals = 0, use_seps = TRUE) %>%
tab_options(table.background.color = "lightcyan") %>%
tab_style(cell_text(style = "italic"))
table <- gt(country_total) %>%
tab_header(title = "Per Capita European Energy Production", subtitle = "2018 total net energy production, top ten displayed") %>%
cols_hide(c("country", "type", "level" , "Year")) %>%
cols_move_to_start("rank") %>%
cols_label(rank = "", country_name = "Country", Energy = "Net Energy Production (GWh)", per_cap = "Per Capita Energy Production (MWh/person)") %>%
fmt_number(columns = c("Population", "Energy"), decimals = 0, use_seps = TRUE) %>%
tab_options(table.background.color = "lightcyan") %>%
tab_style(cell_text(style = "italic"), locations = "per_cap")
t
table <- gt(country_total) %>%
tab_header(title = "Per Capita European Energy Production", subtitle = "2018 total net energy production, top ten displayed") %>%
cols_hide(c("country", "type", "level" , "Year")) %>%
cols_move_to_start("rank") %>%
cols_label(rank = "", country_name = "Country", Energy = "Net Energy Production (GWh)", per_cap = "Per Capita Energy Production (MWh/person)") %>%
fmt_number(columns = c("Population", "Energy"), decimals = 0, use_seps = TRUE) %>%
tab_options(table.background.color = "lightcyan") %>%
tab_style(cell_text(style = "italic"), locations = cells_column_labels(per_cap))
table
table <- gt(country_total) %>%
tab_header(title = "Per Capita European Energy Production", subtitle = "2018 total net energy production, top ten displayed") %>%
cols_hide(c("country", "type", "level" , "Year")) %>%
cols_move_to_start("rank") %>%
cols_label(rank = "", country_name = "Country", Energy = "Net Energy Production (GWh)", per_cap = "Per Capita Energy Production (MWh/person)") %>%
fmt_number(columns = c("Population", "Energy"), decimals = 0, use_seps = TRUE) %>%
tab_options(table.background.color = "lightcyan") %>%
tab_style(cell_text(style = "italic"), locations = cells_column_labels("per_cap"))
table
table <- gt(country_total) %>%
tab_header(title = "Per Capita European Energy Production", subtitle = "2018 total net energy production, top ten displayed") %>%
cols_hide(c("country", "type", "level" , "Year")) %>%
cols_move_to_start("rank") %>%
cols_label(rank = "", country_name = "Country", Energy = "Net Energy Production (GWh)", per_cap = "Per Capita Energy Production (MWh/person)") %>%
fmt_number(columns = c("Population", "Energy"), decimals = 0, use_seps = TRUE) %>%
tab_options(table.background.color = "lightcyan") %>%
tab_style(cell_text(style = "italic"), locations = cells_column("per_cap"))
table <- gt(country_total) %>%
tab_header(title = "Per Capita European Energy Production", subtitle = "2018 total net energy production, top ten displayed") %>%
cols_hide(c("country", "type", "level" , "Year")) %>%
cols_move_to_start("rank") %>%
cols_label(rank = "", country_name = "Country", Energy = "Net Energy Production (GWh)", per_cap = "Per Capita Energy Production (MWh/person)") %>%
fmt_number(columns = c("Population", "Energy"), decimals = 0, use_seps = TRUE) %>%
tab_options(table.background.color = "lightcyan") %>%
tab_style(cell_text(style = "italic"), locations = column("per_cap"))
table
table <- gt(country_total) %>%
tab_header(title = "Per Capita European Energy Production", subtitle = "2018 total net energy production, top ten displayed") %>%
cols_hide(c("country", "type", "level" , "Year")) %>%
cols_move_to_start("rank") %>%
cols_label(rank = "", country_name = "Country", Energy = "Net Energy Production (GWh)", per_cap = "Per Capita Energy Production (MWh/person)") %>%
fmt_number(columns = c("Population", "Energy"), decimals = 0, use_seps = TRUE) %>%
tab_options(table.background.color = "lightcyan") %>%
tab_style(style = cells_styles(bkgd_color = "lightcyan",text_weight = "bold"),locations = cells_data(columns = per_cap))
table <- gt(country_total) %>%
tab_header(title = "Per Capita European Energy Production", subtitle = "2018 total net energy production, top ten displayed") %>%
cols_hide(c("country", "type", "level" , "Year")) %>%
cols_move_to_start("rank") %>%
cols_label(rank = "", country_name = "Country", Energy = "Net Energy Production (GWh)", per_cap = "Per Capita Energy Production (MWh/person)") %>%
fmt_number(columns = c("Population", "Energy"), decimals = 0, use_seps = TRUE) %>%
tab_options(table.background.color = "lightcyan") %>%
tab_style(style = cells_styles(bkgd_color = "lightcyan",text_weight = "bold"),locations = cells_body(columns = per_cap))
table <- gt(country_total) %>%
tab_header(title = "Per Capita European Energy Production", subtitle = "2018 total net energy production, top ten displayed") %>%
cols_hide(c("country", "type", "level" , "Year")) %>%
cols_move_to_start("rank") %>%
cols_label(rank = "", country_name = "Country", Energy = "Net Energy Production (GWh)", per_cap = "Per Capita Energy Production (MWh/person)") %>%
fmt_number(columns = c("Population", "Energy"), decimals = 0, use_seps = TRUE) %>%
tab_options(table.background.color = "lightcyan") %>%
tab_style(style = cells_styles(text_weight = "bold"),locations = cells_body(columns = "per_cap"))
table
table <- gt(country_total) %>%
tab_header(title = "Per Capita European Energy Production", subtitle = "2018 total net energy production, top ten displayed") %>%
cols_hide(c("country", "type", "level" , "Year")) %>%
cols_move_to_start("rank") %>%
cols_label(rank = "", country_name = "Country", Energy = "Net Energy Production (GWh)", per_cap = "Per Capita Energy Production (MWh/person)") %>%
fmt_number(columns = c("Population", "Energy"), decimals = 0, use_seps = TRUE) %>%
tab_options(table.background.color = "lightcyan") %>%
tab_style(style = cells_style(text_weight = "bold"),locations = cells_body(columns = "per_cap"))
table
library(gt)
<<<<<<< HEAD
table <- gt(country_total) %>%
tab_header(title = "Per Capita European Energy Production", subtitle = "2018 total net energy production, top ten displayed") %>%
cols_hide(c("country", "type", "level" , "Year")) %>%
cols_move_to_start("rank") %>%
cols_label(rank = "", country_name = "Country", Energy = "Net Energy Production (GWh)", per_cap = "Per Capita Energy Production (MWh/person)") %>%
fmt_number(columns = c("Population", "Energy"), decimals = 0, use_seps = TRUE) %>%
tab_options(table.background.color = "lightcyan") %>%
tab_style(style = tab_styles(text_weight = "bold"),locations = tab_body(columns = "per_cap"))
table
table <- gt(country_total) %>%
table <- gt(country_total) %>%
table <- gt(country_total) %>%
tab_header(title = "Per Capita European Energy Production", subtitle = "2018 total net energy production, top ten displayed") %>%
cols_hide(c("country", "type", "level" , "Year")) %>%
cols_move_to_start("rank") %>%
cols_label(rank = "", country_name = "Country", Energy = "Net Energy Production (GWh)", per_cap = "Per Capita Energy Production (MWh/person)") %>%
fmt_number(columns = c("Population", "Energy"), decimals = 0, use_seps = TRUE) %>%
tab_options(table.background.color = "lightcyan") %>%
tab_style(style = tab_styles(text_weight = "bold"),locations = cells_data(columns = vars(per_cap)))
table <- gt(country_total) %>%
tab_header(title = "Per Capita European Energy Production", subtitle = "2018 total net energy production, top ten displayed") %>%
cols_hide(c("country", "type", "level" , "Year")) %>%
cols_move_to_start("rank") %>%
cols_label(rank = "", country_name = "Country", Energy = "Net Energy Production (GWh)", per_cap = "Per Capita Energy Production (MWh/person)") %>%
fmt_number(columns = c("Population", "Energy"), decimals = 0, use_seps = TRUE) %>%
tab_options(table.background.color = "lightcyan") %>%
tab_style(style = cells_styles(text_weight = "bold"),locations = cells_body(columns = vars(per_cap)))
table
table <- gt(country_total) %>%
tab_header(title = "Per Capita European Energy Production", subtitle = "2018 total net energy production, top ten displayed") %>%
cols_hide(c("country", "type", "level" , "Year")) %>%
cols_move_to_start("rank") %>%
cols_label(rank = "", country_name = "Country", Energy = "Net Energy Production (GWh)", per_cap = "Per Capita Energy Production (MWh/person)") %>%
fmt_number(columns = c("Population", "Energy"), decimals = 0, use_seps = TRUE) %>%
tab_options(table.background.color = "lightcyan") %>%
tab_style(style = cell_text(style = "bold"), locations = per_cap)
table <- gt(country_total) %>%
tab_header(title = "Per Capita European Energy Production", subtitle = "2018 total net energy production, top ten displayed") %>%
cols_hide(c("country", "type", "level" , "Year")) %>%
cols_move_to_start("rank") %>%
cols_label(rank = "", country_name = "Country", Energy = "Net Energy Production (GWh)", per_cap = "Per Capita Energy Production (MWh/person)") %>%
fmt_number(columns = c("Population", "Energy"), decimals = 0, use_seps = TRUE) %>%
tab_options(table.background.color = "lightcyan") %>%
tab_style(style = cell_text(style = "bold"), locations = "per_cap")
table <- gt(country_total) %>%
tab_header(title = "Per Capita European Energy Production", subtitle = "2018 total net energy production, top ten displayed") %>%
cols_hide(c("country", "type", "level" , "Year")) %>%
cols_move_to_start("rank") %>%
cols_label(rank = "", country_name = "Country", Energy = "Net Energy Production (GWh)", per_cap = "Per Capita Energy Production (MWh/person)") %>%
fmt_number(columns = c("Population", "Energy"), decimals = 0, use_seps = TRUE) %>%
tab_options(table.background.color = "lightcyan") %>%
tab_style(style = cell_text(style = "bold"), locations = cells_body("per_cap"))
table <- gt(country_total) %>%
tab_header(title = "Per Capita European Energy Production", subtitle = "2018 total net energy production, top ten displayed") %>%
cols_hide(c("country", "type", "level" , "Year")) %>%
cols_move_to_start("rank") %>%
cols_label(rank = "", country_name = "Country", Energy = "Net Energy Production (GWh)", per_cap = "Per Capita Energy Production (MWh/person)") %>%
fmt_number(columns = c("Population", "Energy"), decimals = 0, use_seps = TRUE) %>%
tab_options(table.background.color = "lightcyan") %>%
tab_style(style = cell_text(style = "italic"), locations = cells_body("per_cap"))
table
table <- gt(country_total) %>%
tab_header(title = "Per Capita European Energy Production", subtitle = "2018 total net energy production, top ten displayed") %>%
cols_hide(c("country", "type", "level" , "Year")) %>%
cols_move_to_start("rank") %>%
cols_label(rank = "", country_name = "Country", Energy = "Net Energy Production (GWh)", per_cap = "Per Capita Energy Production (MWh/person)") %>%
fmt_number(columns = c("Population", "Energy"), decimals = 0, use_seps = TRUE) %>%
fmt_number(columns = "per_cap", decimals = 2, use_seps = TRUE)
table <- gt(country_total) %>%
tab_header(title = "Per Capita European Energy Production", subtitle = "2018 total net energy production, top ten displayed") %>%
cols_hide(c("country", "type", "level" , "Year")) %>%
cols_move_to_start("rank") %>%
cols_label(rank = "", country_name = "Country", Energy = "Net Energy Production (GWh)", per_cap = "Per Capita Energy Production (MWh/person)") %>%
fmt_number(columns = c("Population", "Energy"), decimals = 0, use_seps = TRUE) %>%
fmt_number(columns = "per_cap", decimals = 2, use_seps = TRUE) %>%
tab_options(table.background.color = "lightcyan") %>%
tab_style(style = cell_text(style = "italic"), locations = cells_body("per_cap"))
table
table <- gt(country_total) %>%
tab_header(title = "Per Capita European Energy Production", subtitle = "2018 total net energy production, top ten displayed", caption = "th") %>%
cols_hide(c("country", "type", "level" , "Year")) %>%
cols_move_to_start("rank") %>%
cols_label(rank = "", country_name = "Country", Energy = "Net Energy Production (GWh)", per_cap = "Per Capita Energy Production (MWh/person)") %>%
fmt_number(columns = c("Population", "Energy"), decimals = 0, use_seps = TRUE) %>%
fmt_number(columns = "per_cap", decimals = 2, use_seps = TRUE) %>%
tab_options(table.background.color = "lightcyan") %>%
tab_style(style = cell_text(style = "italic"), locations = cells_body("per_cap"))
table <- gt(country_total) %>%
tab_header(title = "Per Capita European Energy Production", subtitle = "2018 total net energy production, top ten displayed") %>%
cols_hide(c("country", "type", "level" , "Year")) %>%
cols_move_to_start("rank") %>%
cols_label(rank = "", country_name = "Country", Energy = "Net Energy Production (GWh)", per_cap = "Per Capita Energy Production (MWh/person)") %>%
fmt_number(columns = c("Population", "Energy"), decimals = 0, use_seps = TRUE) %>%
fmt_number(columns = "per_cap", decimals = 2, use_seps = TRUE) %>%
tab_options(table.background.color = "lightcyan") %>%
tab_style(style = cell_text(style = "italic"), locations = cells_body("per_cap")) %>%
tab_source_note(source_note = "Data from Eurostat and UN Data\n #tidyTuedsay @IanBellio")
table
#Plot
table <- gt(country_total) %>%
tab_header(title = "Per Capita European Energy Production", subtitle = "2018 total net energy production, top ten displayed") %>%
cols_hide(c("country", "type", "level" , "Year")) %>%
cols_move_to_start("rank") %>%
cols_label(rank = "", country_name = "Country", Energy = "Net Energy Production (GWh)", per_cap = "Per Capita Energy Production (MWh/person)") %>%
fmt_number(columns = c("Population", "Energy"), decimals = 0, use_seps = TRUE) %>%
fmt_number(columns = "per_cap", decimals = 2, use_seps = TRUE) %>%
tab_options(table.background.color = "lightcyan") %>%
tab_style(style = cell_text(style = "italic"), locations = cells_body("per_cap")) %>%
tab_source_note(source_note = "Data from Eurostat and UN Data\n #TidyTuedsay @IanBellio")
table
#Plot
table <- gt(country_total) %>%
tab_header(title = "Per Capita European Energy Production", subtitle = "2018 total net energy production, top ten displayed") %>%
cols_hide(c("country", "type", "level" , "Year")) %>%
cols_move_to_start("rank") %>%
cols_label(rank = "", country_name = "Country", Energy = "Net Energy Production (GWh)", per_cap = "Per Capita Energy Production (MWh/person)") %>%
fmt_number(columns = c("Population", "Energy"), decimals = 0, use_seps = TRUE) %>%
fmt_number(columns = "per_cap", decimals = 2, use_seps = TRUE) %>%
tab_options(table.background.color = "lightcyan") %>%
tab_style(style = cell_text(style = "italic"), locations = cells_body("per_cap")) %>%
tab_source_note(source_note = "Data from Eurostat and UN Data    #TidyTuesday   @IanBellio")
table
#Plot
table <- gt(country_total) %>%
tab_header(title = "Per Capita European Energy Production", subtitle = "2018 total net energy production, top ten displayed") %>%
cols_hide(c("country", "type", "level" , "Year")) %>%
cols_move_to_start("rank") %>%
cols_label(rank = "", country_name = "Country", Energy = "Net Energy Production (GWh)", per_cap = "Per Capita Energy Production (MWh/person)") %>%
fmt_number(columns = c("Population", "Energy"), decimals = 0, use_seps = TRUE) %>%
fmt_number(columns = "per_cap", decimals = 2, use_seps = TRUE) %>%
tab_options(table.background.color = "lightcyan") %>%
tab_style(style = cell_text(style = "italic"), locations = cells_body("per_cap")) %>%
tab_source_note(source_note = "Data from Eurostat and UN Data  |  #TidyTuesday  | @IanBellio")
table
#Plot
table <- gt(country_total) %>%
tab_header(title = "Per Capita European Energy Production", subtitle = "2018 total net energy production, top ten displayed") %>%
cols_hide(c("country", "type", "level" , "Year")) %>%
cols_move_to_start("rank") %>%
cols_label(rank = "", country_name = "Country", Energy = "Net Energy Production (GWh)", per_cap = "Per Capita Energy Production (MWh/person)") %>%
fmt_number(columns = c("Population", "Energy"), decimals = 0, use_seps = TRUE) %>%
fmt_number(columns = "per_cap", decimals = 2, use_seps = TRUE) %>%
tab_options(table.background.color = "lightcyan") %>%
tab_style(style = cell_text(style = "italic"), locations = cells_body("per_cap")) %>%
tab_source_note(source_note = "Data from Eurostat and UN Data  |  #TidyTuesday  | @IanBellio") %>%
gtsave("tab_1.png", expand = 10)
install.packages("webshot")
#Plot
table <- gt(country_total) %>%
tab_header(title = "Per Capita European Energy Production", subtitle = "2018 total net energy production, top ten displayed") %>%
cols_hide(c("country", "type", "level" , "Year")) %>%
cols_move_to_start("rank") %>%
cols_label(rank = "", country_name = "Country", Energy = "Net Energy Production (GWh)", per_cap = "Per Capita Energy Production (MWh/person)") %>%
fmt_number(columns = c("Population", "Energy"), decimals = 0, use_seps = TRUE) %>%
fmt_number(columns = "per_cap", decimals = 2, use_seps = TRUE) %>%
tab_options(table.background.color = "lightcyan") %>%
tab_style(style = cell_text(style = "italic"), locations = cells_body("per_cap")) %>%
tab_source_note(source_note = "Data from Eurostat and UN Data  |  #TidyTuesday  | @IanBellio") %>%
gtsave("tab_1.png", expand = 10)
#Plot
table <- gt(country_total) %>%
tab_header(title = "Per Capita European Energy Production", subtitle = "2018 total net energy production, top ten displayed") %>%
cols_hide(c("country", "type", "level" , "Year")) %>%
cols_move_to_start("rank") %>%
cols_label(rank = "", country_name = "Country", Energy = "Net Energy Production (GWh)", per_cap = "Per Capita Energy Production (MWh/person)") %>%
fmt_number(columns = c("Population", "Energy"), decimals = 0, use_seps = TRUE) %>%
fmt_number(columns = "per_cap", decimals = 2, use_seps = TRUE) %>%
tab_options(table.background.color = "lightcyan") %>%
tab_style(style = cell_text(style = "italic"), locations = cells_body("per_cap")) %>%
tab_source_note(source_note = "Data from Eurostat and UN Data  |  #TidyTuesday  | @IanBellio")
table
=======
library(broom)
library(tidyverse)
install.packages("backports")
library(tidyverse)
library(broom)
>>>>>>> d5baa66cdea50bed6109f499158ef385f3e0b7c0
>>>>>>> 26d12aa339e597657618c9a5ba85f27391d0dd70
